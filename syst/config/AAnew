#vim: ft=ruby ts=2
require "dr/config/configure/syst_init"

## Configure users on current computer
process=DR::Process::SystInit.new
c=process.computer
u=c.set_key(:sysinit,:users,"dina", c.dig(:syst,:users,"dina"))
u[:groups] << 'sshc'
process.bootstrap #for the added groups
process.process_script(process.dir[:configure]+"users.rb")

## Set up all options manually
computer=DR::Computer.new(...)
process=DR::Process::SystInit.new(computer)

## Virtual raw image
process=DR::Process::SystInit.create_process("arch_virtual", disk: "/tmp/arch-img.raw:size=2G")
process.computer[:sysinit][:newusers]=["dams", "provision"]
process.do_all(pause: false)
# $ ./init.rb --disk="/tmp/arch_img.raw:size=2G" --create="arch_virtual" --build
# $ sudo systemd-nspawn -bni /tmp/arch-img.raw
# $ sudo machinectl start /tmp/arch-img.raw

# Note: if the image already exists, just call `process.do_prepare` to mount
# it again

## Virtual raw image with btrfs
process=DR::Process::SystInit.create_process("arch_virtual", fstype: :btrfs, disk: "/tmp/arch-img.raw:size=2G")
process.computer[:sysinit][:backup]=true
process.computer[:sysinit][:newusers]=["dams", "provision"]
process.computer[:sysinit][:partitions][:boot][:partlength]="+150M"
process.do_all
# $ ~/script/qemu-launch --efi /tmp/arch-img.raw
# Or to specify the boot options directly:
# $ ~/script/qemu-launch --linuxoptions "root=PARTLABEL=rootleaf rootflags=subvol=slash,rw" --linux /tmp/arch-img.raw

## Filesystem container image
# (a .img rather than .raw means we will be an archcontainer rather than a archvirtual)
process=DR::Process::SystInit.create_process("arch_img", fstype: :ext4, disk: "/tmp/arch-img.img:size=2G")
process.do_all
# Ex: to install more packages
# process.do_prepare; process.pacstrap('ruby'); process.do_clean

## Filesystem container image without gpt partition
process=DR::Process::SystInit.create_process("arch_img", fstype: :ext4, disk: "/tmp/arch-img.img:size=2G")
process.do_all do |partitions, **opts| #partitions callback
  partitions[:slash].delete(:parttype) #<= don't create a gpt partition, this could be done before the callback, or we could set process.prepare directly
  partitions[:slash][:devname]=opts[:disk] #<= set the device name to use; this has to be done in the callback, because before we do not know :disk=/dev/loop?
  partitions
end
# Note: here to mount the image, `mount -o loop image /mnt/image` works directly

## Container (in a subvolume)
process=DR::Process::SystInit.create_process("arch_container", root: "/var/lib/machines/arch_container")
#process.computer[:syst][:type]=:systemd #only systemd; the default :bare takes 450MB-875MB vs 320MB for systemd # for a lightweight container
  # for container with the features of virtual images:
  process.computer.add_to_key(:attributes, :syst_types, %i(pacman ssh shell)) # this is by default for virtual images
  process.computer[:sysinit][:newusers]=["dams", "provision"]
process.do_all(pause: false)

## New Feanor
c=DR::Computer.new("local")
process=DR::Process::SystInit.create_process(c, fstype: :btrfs, disk: "/dev/sde")
# delete the local groups and users, they need to be recreated
process.computer[:local_infos][:syst].delete(:users)
process.computer[:local_infos][:syst].delete(:groups)
# First minimal install for snapshot
process.computer[:syst][:packages]="init"
process.computer[:sysinit][:backup]=true
# partitions
partitions=process.computer[:sysinit][:partitions]
partitions[:boot][:partlength]="+250M"
partitions[:swap] = {parttype: :swap, partlength: "+4G", fstype: "swap"}
rootleaf=partitions.delete(:rootleaf); partitions[:rootleaf]=rootleaf #we need this at the end
process.computer[:sysinit][:partitions]=partitions
# build
process.do_all
# redo the configuration with all packages now
process.computer[:syst].delete(:packages)
process.computer[:sysinit][:backup]=false
process.do_mount
# remove vim(vim-minimal) which was installed previously, it conflicts with gvim
process.chroot("pacman -R vim")
process.do_install
process.do_clean
# $ sudo systemd-nspawn -bnD /mnt/image
# Configure 'dams' user (cf ~/config/AAnew)
