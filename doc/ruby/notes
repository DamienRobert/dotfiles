# vim: foldmethod=marker ft=markdownlight
#:call SyntaxRange#Include('@begin=ruby@','@end=ruby@', 'ruby', 'NonText')
#ou ,shl

# Assignement {{{1

An assignment expression may have one or more lvalues and one or more rvalues.
This section explains how Ruby handles assignment with different combinations
of arguments:
1. If any rvalue is prefixed with an asterisk and implements to_a, the rvalue
is replaced with the elements returned by to_a, with each element forming its
own rvalue.
2. If the assignment contains one lvalue and multiple rvalues, the rvalues are
converted to an array and assigned to that lvalue.
3. If the assignment contains multiple lvalues and one rvalue, the rvalue is
expanded if possible into a set of rvalues as described in (1).
4. Successive rvalues are assigned to the lvalues. This assignment effectively
happens in parallel, so that (for example) a,b=b,a swaps the values in a and b.
5. If there are more lvalues than rvalues, the excess will have nil assigned to
them.
6. If there are more rvalues than lvalues, the excess will be ignored.
7. At most one lvalue can be prefixed by an asterisk. This lvalue will end up
being an array and will contain as many rvalues as possible. If there are
lvalues to the right of the starred lvalue, these will be assigned from the
trailing rvalues, and whatever rvalues are left will be assigned to the splat
lvalue.
8. If an lvalue contains a parenthesized list, the list is treated as a nested
assignment statement, and then it is assigned from the corresponding rvalue as
described by these rules.

a,b=1,2 #a=1, b=2
a,b=1,2,3 #a=1, b=2
a,b=[1,2,3] #a=1, b=2
a,*b=1,2,3 #a=1, b=[2,3]
a,b=2,[1,2,3],5 #a=2, b=[1,2,3]

a=[1,2,3]
a[5]=[7,8] => [1, 2, 3, nil, nil, [7, 8]]
a[0,0]=[-1,-2] => [-1, -2, 1, 2, 3, nil, nil, [7, 8]]
a=[1,2,3]; a[0..1]=['a','b','c'] => ["a", "b", "c", 3]
a[0..2]=0 => [0,3]

}}}

# case/when {{{1
case ploum
when String
  puts "String"
when 1, 2
  puts "1 or 2"
when /ab/
  ...
else
  ...
end

Matcher deux valeurs en même temps: le pb est que Array#=== ne fait pas ===
récursivement, mais fait juste Array#==
Donc
case [1,2]
when [1,2] #ok
when [Numeric, 2] #pas ok

  #Monkey patch:
class Array
  def ===(other)
    return false if (other.size != self.size)

    other_dup = other.dup
    all? do |e|
      e === other_dup.shift
    end
  end
end

# Begin/End/Data {{{1
Un programme ruby peut avoir des blocks
BEGIN{} et END{} qui sont executés au lancement dans l'ordre, resp à la fin
du programme dans l'ordre inverse. Enfin après __END__ la constante DATA
pointe à ce qu'il y a (c'est juste un seek de __FILE__)
}}}1

# Equality {{{1
http://stackoverflow.com/questions/7156955/whats-the-difference-between-equal-eql-and
==: égalité, equal? égalité stricte sur les objets (test si les pointeurs
sont égaux), eql? aliasé sur == par défaut (utilisé pour les hash,
overridé par ex sur les types numériques pour faire la conversion), ===
aliasé sur == par défaut (utilisé dans case when, par exemple when /ab/
regarde si la regex matche)
#}}}1
# Print/Read {{{1
1)
p ploum does puts ploum.inspect (ie for debugging)
puts ploum use ploum.to_s

2)
print outputs each argument (followed by $,) to $stdout (ending with $\.) It
is equivalent to args.join($,) + $\

puts sets both $, and $\ to "\n" and then does the same thing as print. The
key difference being that each argument is a new line with puts.

3) Same difference between file.write or file.print and file.puts
Rem: n=IO.write("ploum") give the number of char written
whilte IO.print("ploum","plam") can take several arguments but have no
return value

4) Cf aussi display (public method of class Object) and inspect:

display(port=$>) => nil

 Prints obj on the given port (default $>). Equivalent to:
 def display(port=$>)
   port.write self
 end

inspect => string 
  
  Returns a string containing a human-readable representation of obj. If
  not overridden, uses the to_s method to generate the string.

(la différence entre inspect et display sont le type de retour, ie un
string pour inspect vs effet de bord pour display)

5) lines=IO.readlines(sep=$/): read lines in an array
   IO.read: read all of the file, IO.read(10) reads 10 char
   IO.gets(sep=$/): read next line (a line is given by the separator $/)
#}}}1
#idiomatisme pour construire une liste: {{{1
@begin=ruby@
ploum.each do |plam|
  (r||=[]) << plam
end #le pb c'est que r reste local au block ici...
r=nil; s="abc".each_char do |c| (r||=[]) << c end; p r, s
#-> ["a", "b", "c"] "abc"
#on voit que la valeur de retour de each_char est "abc"
@end=ruby@
#}}}1
# Symbol variables in ruby {{{1
$!      ->      $ERROR_INFO
    The exception object passed to raise.
$@      ->      $ERROR_POSITION
    The stack backtrace generated by the last exception. See Kernel.caller for details. Thread local.
$;      ->      $FS
    The default separator pattern used by String.split. May be set from the command line using the -F flag.
$;      ->      $FIELD_SEPARATOR
    The default separator pattern used by String.split. May be set from the command line using the -F flag.
$,      ->      $OFS
    The separator string output between the parameters to methods such as Kernel.print and Array.join. Defaults to nil, which adds no text.
$,      ->      $OUTPUT_FIELD_SEPARATOR
    The separator string output between the parameters to methods such as Kernel.print and Array.join. Defaults to nil, which adds no text.
$/      ->      $RS
    The input record separator (newline by default). This is the value that routines such as Kernel.gets use to determine record boundaries. If set to nil, gets will read the entire file.
$/      ->      $INPUT_RECORD_SEPARATOR
    The input record separator (newline by default). This is the value that routines such as Kernel.gets use to determine record boundaries. If set to nil, gets will read the entire file.
$\      ->      $ORS
    The string appended to the output of every call to methods such as Kernel.print and IO.write. The default value is nil.
$\      ->      $OUTPUT_RECORD_SEPARATOR
    The string appended to the output of every call to methods such as Kernel.print and IO.write. The default value is nil.
$.      ->      $INPUT_LINE_NUMBER
    The number of the last line read from the current input file.
$.      ->      $NR
    The number of the last line read from the current input file.
`$_      ->      $LAST_READ_LINE`
    The last line read by Kernel.gets or Kernel.readline. Many string-related functions in the Kernel module operate on $_ by default. The variable is local to the current scope. Thread local.
$>      ->      $DEFAULT_OUTPUT
    The destination of output for Kernel.print and Kernel.printf. The default value is $stdout.
$<      ->      $DEFAULT_INPUT
    An object that provides access to the concatenation of the contents of all the files given as command-line arguments, or $stdin (in the case where there are no arguments). $< supports methods similar to a File object: inmode, close, closed?, each, each_byte, each_line, eof, eof?, file, filename, fileno, getc, gets, lineno, lineno=, path, pos, pos=, read, readchar, readline, readlines, rewind, seek, skip, tell, to_a, to_i, to_io, to_s, along with the methods in Enumerable. The method file returns a File object for the file currently being read. This may change as $< reads through the files on the command line. Read only.
$$      ->      $PID
    The process number of the program being executed. Read only.
$$      ->      $PROCESS_ID
    The process number of the program being executed. Read only.
$?      ->      $CHILD_STATUS
    The exit status of the last child process to terminate. Read only. Thread local.
$~      ->      $LAST_MATCH_INFO
    A MatchData object that encapsulates the results of a successful pattern match. The variables $&, $`, $’, and $1 to $9 are all derived from $~. Assigning to $~ changes the values of these derived variables. This variable is local to the current scope. Thread local.
$=      ->      $IGNORECASE
    If set to any value apart from nil or false, all pattern matches will be case insensitive, string comparisons will ignore case, and string hash values will be case insensitive. Deprecated
`$*      ->      $ARGV`
    An array of strings containing the command-line options from the invocation of the program. Options used by the Ruby interpreter will have been removed. Read only. Also known simply as ARGV.
$&      ->      $MATCH
    The string matched by the last successful pattern match. This variable is local to the current scope. Read only. Thread local.
$`      ->      $PREMATCH
    The string preceding the match in the last successful pattern match. This variable is local to the current scope. Read only. Thread local.
$'      ->      $POSTMATCH
    The string following the match in the last successful pattern match. This variable is local to the current scope. Read only. Thread local.
$+      ->      $LAST_PAREN_MATCH
    The contents of the highest-numbered group matched in the last successful pattern match. Thus, in "cat" =~ /(c|a)(t|z)/, $+ will be set to "t". This variable is local to the current scope. Read only. Thread local. 


Exception Information
=====================

$! Exception The exception object passed to raise. [thread]
$@ Array The stack backtrace generated by the last exception. See Kernel#caller on page 567 for details. [thread]

Pattern Matching Variables
=========================
These variables (except $=) are set to nil after an unsuccessful pattern match.

$& String The string matched (following a successful pattern match). This
variable is local to the current scope. [r/o, thread]

$+ String The contents of the highest-numbered group matched following a
successful pattern match. Thus, in "cat" =~/(c|a)(t|z)/, $+ will be set to “t.”
This variable is local to the current scope. [r/o, thread]

$` String The string preceding the match in a successful pattern match. This
variable is local to the current scope. [r/o, thread]

$' String The string following the match in a successful pattern match. This
variable is local to the current scope. [r/o, thread]

$1. . . $n String The contents of successive groups matched in a successful
pattern match. In "cat" =~/(c|a)(t|z)/, $1 will be set to “a” and $2 to “t.”
This variable is local to the current scope. [r/o, thread]

$~ MatchData An object that encapsulates the results of a successful pattern
match. The variables $&, $`, $', and $1 to $9 are all derived from $~.
Assigning to $~ changes the values of these derived variables. This variable is
local to the current scope. [thread] The variable $=, which previously
controlled case-insensitive matches, has been removed from Ruby 1.9.

Input/Output Variables
=====================

$/ String The input record separator (newline by default). This is the value
that routines such as Kernel#gets use to determine record boundaries. If set to
nil, gets will read the entire file.

$-0 String Synonym for $/.

$\ String The string appended to the output of every call to methods such as
Kernel#print and IO#write. The default value is nil.

$, String The separator string output between the parameters to methods such as
Kernel#print and Array#join. Defaults to nil, which adds no text.

$. Fixnum The number of the last line read from the current input file.

$; String The default separator pattern used by String#split. May be set from
the command line using the -F flag.

$< Object An object that provides access to the concatenation of the contents
of all the files given as command-line arguments or $stdin (in the case where
there are no argu- ments). $< supports methods similar to a File object:
binmode, close, closed?, each, each_byte, each_line, eof, eof?, file, filename,
fileno, getc, gets, lineno, lineno=, path, pos, pos=, read, readchar, readline,
readlines, rewind, seek, skip, tell, to_a, to_i, to_io, to_s, along with the
methods in Enumerable. The method file returns a File object for the file
currently being read. This may change as $< reads through the files on the
command line. [r/o]

$> IO The destination of output for Kernel#print and Kernel#printf. The default
value is $stdout.

$_ String The last line read by Kernel#gets or Kernel#readline. Many
string-related functions in the Kernel module operate on $_ by default. The
variable is local to the current scope. [thread]

$-F String Synonym for $;.

$stderr IO The current standard error output.

$stdin IO The current standard input.

$stdout IO The current standard output. Assignment to $stdout is not permitted:
use $stdout.reopen instead.
The variables $defout and $deferr have been removed from Ruby 1.9.

Execution Environment Variables
===============================

$0 String The name of the top-level Ruby program being executed. Typically this
will be the program’s filename. On some operating systems, assigning to this
variable will change the name of the process reported (for example) by the
ps(1) command.

$* Array An array of strings containing the command-line options from the
invocation of the program. Options used by the Ruby interpreter will have been
removed. [r/o]

$" Array An array containing the filenames of modules loaded by require. [r/o]

$$ Fixnum The process number of the program being executed. [r/o]

$? Process::Status The exit status of the last child process to terminate.
[r/o, thread]

$: Array An array of strings, where each string specifies a directory to be
searched for Ruby scripts and binary extensions used by the load and require
methods. The initial value is the value of the arguments passed via the -I
command-line option, followed by an installation-defined standard library
location, followed by the current directory (“.”). This variable may be set
from within a program to alter the default search path; typically, programs use

$: << dir to append dir to the path. [r/o]

$-a Object True if the -a option is specified on the command line. [r/o] _
_callee_ _ Symbol The name of the lexically enclosing method.

$-d Object Synonym for $DEBUG.

$DEBUG Object Set to true if the -d command-line option is specified.

__ENCODING__ String The encoding of the current source file. [r/o]

__FILE__ String The name of the current source file. [r/o]

$F Array The array that receives the split input line if the -a command-line option is used.

$FILENAME String The name of the current input file. Equivalent to $<.filename.
[r/o]

$-i String If in-place edit mode is enabled (perhaps using the -i command-line
option), $-i holds the extension used when creating the backup file. If you set
a value into $-i, enables in-place edit mode. See page 235.

$-I Array Synonym for $:. [r/o]

$-l Object Set to true if the -l option (which enables line-end processing) is present on the command line. See page 235. [r/o]

__LINE__ String The current line number in the source file. [r/o]

$LOAD_PATH Array A synonym for $:. [r/o]

$LOADED_FEATURES Array Synonym for $". [r/o]

__method__ Symbol The name of the lexically enclosing method.

$PROGRAM_NAME String Alias for $0.

$-p Object Set to true if the -p option (which puts an implicit while gets . .
. end loop around your program) is present on the command line. See page 235.
[r/o]

$SAFE Fixnum The current safe level (see page 437). This variable’s value may never be reduced by assignment. [thread]

$VERBOSE Object Set to true if the -v, --version, -W, or -w option is specified
on the command line. Set to false if no option, or -W1 is given. Set to nil if
-W0 was specified. Setting this option to true causes the interpreter and some
library routines to report addi- tional information. Setting to nil suppresses
all warnings (including the output of Kernel.warn).
$-v Object Synonym for $VERBOSE.
$-w Object Synonym for $VERBOSE.

$-W Object Return the value set by the -W command-line option.

Standard Objects
================

ARGF Object A synonym for $<.

ARGV Array A synonym for $*.

ENV Object A hash-like object containing the program’s environment variables.
An instance of class Object, ENV implements the full set of Hash methods. Used
to query and set the value of an environment variable, as in ENV["PATH"] and
ENV["term"]="ansi".

false FalseClass Singleton instance of class FalseClass. [r/o]

nil NilClass The singleton instance of class NilClass. The value of
uninitialized instance and global variables. [r/o]

self Object The receiver (object) of the current method. [r/o]

true TrueClass Singleton instance of class TrueClass. [r/o]

Global Constants
================

The following constants are defined by the Ruby interpreter.

DATA IO
If the main program file contains the directive __END__, then the con-
stant DATA will be initialized so that reading from it will return lines
following __END__ from the source file.

FALSE FalseClass Constant containing reference to false.

NIL NilClass Constant containing reference to nil.

RUBY_COPYRIGHT String The interpreter copyright.

RUBY_DESCRIPTION String Version number and architecture of the interpreter.

RUBY_ENGINE String The name of the Ruby interpreter. Returns ruby for Matz’s
version. Other interpreters include macruby, ironruby, jruby, and rubinius.

RUBY_PATCHLEVEL String The patch level of the interpreter.

RUBY_PLATFORM String The identifier of the platform running this program. This
string is in the same form as the platform identifier used by the GNU configure
utility (which is not a coincidence).

RUBY_RELEASE_DATE String The date of this release.

RUBY_REVISION String The revision of the interpreter.

RUBY_VERSION String The version number of the interpreter.

STDERR IO The actual standard error stream for the program. The initial value
of $stderr.

STDIN IO The actual standard input stream for the program. The initial value of
        $stdin.

STDOUT IO The actual standard output stream for the program. The initial value
of $stdout.

SCRIPT_LINES_ _ Hash If a constant SCRIPT_LINES__ is defined and references a
Hash, Ruby will store an entry containing the contents of each file it parses,
with the file’s name as the key and an array of strings as the value. See Ker-
nel.require on page 576 for an example.

TOPLEVEL_BINDING Binding A Binding object representing the binding at Ruby’s
top level—the level where programs are initially executed.

TRUE TrueClass A reference to the object true.

The constant _ _FILE_ _ and the variable $0 are often used together to run code
only if it appears in the file run directly by the user. For example, library
writers often use this toinclude tests in their libraries that will be run if
the library source is run directly, but not if the source is required into
another program.
@begin=ruby@
# library code
# ...
if __FILE__ == $0
# tests...
end
@end=ruby@

#}}}

# Class variables {{{1
Class variables belong to the innermost enclosing class or module. Class
variables used at the top level are defined in Object and behave like global
variables. Class variables defined within singleton methods belong to the top
level (although this usage is deprecated and generates a warning). In Ruby 1.9,
class variables are private to the defining class:

@begin=ruby@
class Holder
  @@var = 99
  def Holder.var=(val)
    @@var = val
  end
  def var
    @@var
  end
end
@@var = "top level variable"
a = Holder.new
a.var # => "top level variable"
Holder.var = 123
a.var # => 123
# This references the top-level object
def a.get_var
  @@var
end
a.get_var # => "top level variable"
@end=ruby@

Class variables are inherited by children but are unique across children:

@begin=ruby@
class Top
  @@A = 1
  @@B = 1
  def dump
    puts values
  end
  def values
    "#{self.class.name}: @@A = #@@A, @@B = #@@B"
  end
end
class MiddleOne < Top
  @@B = 2
  @@C = 2
  def values
    super + ", @@C = #@@C"
  end
end
class MiddleTwo < Top
  @@B = 3
  @@C = 3
  def values
    super + ", @@C = #@@C"
  end
end
class BottomOne < MiddleOne; end
class BottomTwo < MiddleTwo; end
Top.new.dump
MiddleOne.new.dump
MiddleTwo.new.dump
BottomOne.new.dump
BottomTwo.new.dump
produces:
Top: @@A =1, @@B=3
MiddleOne: @@A =1, @@B=3, @@C=2
MiddleTwo: @@A =1, @@B=3, @@C=3
BottomOne: @@A =1, @@B=3, @@C=2
BottomTwo: @@A =1, @@B=3, @@C=3
@end=ruby@

# List comprehension {{{1
=================
@begin=ruby@
#http://stackoverflow.com/questions/310426/list-comprehension-in-ruby
class Array
  def lc(&block)
    return self if block.nil?
    self.collect(&block).compact
  end
end
[1,2,3].lc{|d| ['a','b'].lc{|ch| d.to_s+ch if ch =='a'} if d>=2}

#http://c2.com/cgi/wiki?PythonVsRubyCodeExamples
#Une version plus plate et plus puissante
module Enumerable
  def comprehend(args = [], result=[], &block)
    if empty? then
      r = yield *args
      result << r if r
    else
      (self[0]||[]).each { |e| 
         self[1..-1].comprehend( args + [e], result, &block) }
    end
    result
  end
end
#Comparaison:
  [0..2,0..2,0..2].comprehend { |x,y,z| [x,y,z] if x != y && y != z } 
  (0..2).to_a.lc {|x| (0..2).to_a.lc {|y| [x,y] if x != y }}

  [0..2,0..2].comprehend { |x,y| x+y if x != y} 
#=> [1, 2, 1, 3, 2, 3]
  (0..2).to_a.lc {|x| (0..2).to_a.lc {|y| x+y if x != y }}
# => [[1, 2], [1, 3], [2, 3]] (so we must use result.flatten to get the correct result)
@end=ruby@

Si on veut juste de la comprehension:
http://rosettacode.org/wiki/List_comprehensions#Ruby
(Joli mais si on veut autre chose que la liste, il faut faire un map derrière)
@begin=ruby@
#select Pythagorean triplets
r = ((1..n).flat_map { |x|
       (x..n).flat_map { |y|
                (y..n).flat_map { |z|
                           [[x, y, z]].keep_if { x * x + y * y == z * z
                           }}}})
@end=ruby@
- flat_map concatène des arrays
- array#keep_if is an alternative to Enumerable#select that modifies the
original array. (We avoid Array#select! because it might not return the
array.) 
Ils sont définis dans ruby1.9:
@begin=ruby@
unless Enumerable.method_defined? :flat_map
  module Enumerable
    def flat_map
      inject([]) { |a, x| a.concat yield(x) }
    end
  end
end
unless Array.method_defined? :keep_if
  class Array
    def keep_if
      delete_if { |x| not yield(x) }
    end
  end
end
@end=ruby@

Cf aussi:
https://gist.github.com/3356675 #haskell like madness
https://github.com/postmodern/combinatorics
}}}1

===================================================================
# Divers {{{1
#enlever des variables
remove_instance_variable
remove_class_variable
remove_const
undef method
(rien pour les variables locales (mais r=nil suffit en gal))

Array.new(0) pour initialiser les éléments vides à 0 plutôt qu'à nil,
pareil pour Hash.new()

ploum(:a => 2, :b => 3) collect the elements in a hash
(shorter form for symbols:
ploum(a:2,b:3)

lambda/Proc.new/->

Splat: 
a, *b, c = 1, *[2,3,4]
a,b, * = 1,2,3,4
a,b=b,a
a,(b,c)=1,[2,3]

ploum.plam=plim est équivalent à ploum.plam=(plim) sauf que dans
a=ploum.plam=plim, la valeur de a c'est plim, pas ce que retourne
plam=(plim).

[111] pry(main)> class Ploum
[111] pry(main)*   def initialize(n) @a=n end
[111] pry(main)*   def a=(n) @a=n; return 10; end
[111] pry(main)* end  
[112] pry(main)> p=Ploum.new(5)
[113] pry(main)> p.a=2 => 2
[114] pry(main)> p.a=(2) => 2
[115] pry(main)> p.send(:'a=', 2) => 10
(Note amusante, ça marche aussi pour a.[]=(4,5) dans ce cas on a la valeur
de retour)

for a in b  est équivalent à b.each do |a| (sauf pour le scope:
dans un block les nouvelles variables locales restent internes au scope,
alors que dans if/for/while/until elles se propagent)

begin
end while false
execute le begin une fois quand même

Exception:
begin
  ploum
rescue plim
else plam #pas d'exception
ensure plouf #exectue quoi qu'il arrive
end

ex rescue RuntimeError, SystemExit, Interrupt, StandardError, Exception...

Ou
throw(:ploum,"ahah")
...
a=catch(:ploum) # a=>"ahah"
#la différence avec begin/end est que catch/throw est dynamique, alors que
#begin/end lexical

    class Ploum
    def <<(n)
      @a+=n
      return self
    end
    
    Ploum.new(0)<<1<<2<<3
    
    File.open("ploum") do |file|
    end
    Or 
    File.foreach("ploum") do |line|
    end
    
    Block comments:
    =begin
    =end
    
    BEGIN {
    begin code
    }
    
    END {
    end code
    }
    
    cat << EOF
    cat << 'EOF'
    cat <<- EOF

__END__
Everything after is stored in DATA
About DATA… I just discovered that it is just a File associated with the
current script opened for reading and “seeked” after __END__. Try this:

Interpolating strings:
(% est un raccourci pour sprintf)

    mystring = "There are %<thing1>s and %<thing2>s here."
    => "There are %<thing1>s and %<thing2>s here."
    vars = {:thing1 => "trees", :thing2 => "houses"}
    => {:thing1=>"trees", :thing2=>"houses"}
    mystring % vars
    => "There are trees and houses here." 

    "%05d" % 123                              #=> "00123"
    "%-5s: %08x" % [ "ID", self.object_id ]   #=> "ID   : 200e14d6"
    "foo = %{foo}" % { :foo => 'bar' }        #=> "foo = bar"

#}}}1

Time  {{{1
====

Time in standard library
------------------------
    require time
    t=Time.now
    => 2012-11-30 17:31:13 +0100

    t.iso8601 (=t.xmlschema)
    => "2012-11-30T17:31:13+01:00"
    Time.iso8601(t.iso8601)
    => 2012-11-30 16:31:13 UTC

    t.rfc2822
    => "Fri, 30 Nov 2012 17:31:13 +0100"
    Time.rfc2822(t.rfc2822)
    => 2012-11-30 16:31:13 UTC

    t.utc
    => 2012-11-30 16:31:13 UTC
    t.httpdate
    => "Fri, 30 Nov 2012 16:31:13 GMT"
    Time.httpdate(t.httpdate) #parse a httpdate date
    => 2012-11-30 17:31:13 +0100

    Time.parse("11/2012")
    => 2012-11-01 00:00:00 +0100
    Time.parse("11/11")
    => 2012-11-11 00:00:00 +0100

    Time.parse marche sur xmlschema, rfc2822 et httpdate
    Chronic.parse ne marche que sur xmlschema

Ex: optparse/time est donné par
    require 'optparse'
    require 'time'
    
    OptionParser.accept(Time) do |s,|
      begin
        (Time.httpdate(s) rescue Time.parse(s)) if s
      rescue
        raise OptionParser::InvalidArgument, s
      end
    end


Time with active support
------------------------

[1] pry(main)> require 'active_support/all'
[5] pry(main)> tz=ActiveSupport::TimeZone['Europe/Paris']
=> (GMT+01:00) Europe/Paris
[6] pry(main)> t=Time.local(2012)
=> 2012-01-01 00:00:00 +0100
[9] pry(main)> t=Time.new()
=> 2012-11-22 03:26:54 +0100
[11] pry(main)> t.zone
=> "CET"
[13] pry(main)> t.utc
=> 2012-11-22 02:26:54 UTC
[16] pry(main)> tz.at(t)
=> Thu, 22 Nov 2012 03:26:54 CET +01:00
[17] pry(main)> t
=> 2012-11-22 02:26:54 UTC
[22] pry(main)> t.localtime #yeah i cheated the times should be the same
=> 2012-11-22 03:28:27 +0100
[23] pry(main)> t
=> 2012-11-22 03:28:27 +0100
[24] pry(main)> t.rfc2822
=> "Thu, 22 Nov 2012 03:28:27 +0100"
[25] pry(main)> t.rfc822
=> "Thu, 22 Nov 2012 03:28:27 +0100"
[26] pry(main)> tz.at(t)
=> Thu, 22 Nov 2012 03:28:27 CET +01:00
t.xmlschema
=> "2012-11-24T16:13:56+01:00"


(Active support add Time.current() (like Time.now() but with time zone
in Time.zone_default) By default we have Time.now.zone which give the
system time zone
Time.new(2012): 2012 in system time zone #in std lib
Time.local_time(2012): 2012 in user time zone
Time.utc_time(2012): 2012 in utc time zone
Also add things like now=Time.current, now+1.year
#}}}1

Pour la manipulation de fichiers:
cf FileUtils, Pathname, Dir
