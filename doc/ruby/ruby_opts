     -w             Enables verbose mode without printing version message at
                    the beginning.  It sets the $VERBOSE variable to true.

     -l             (The lowercase letter “ell”.)  Enables automatic line-end‐
                    ing processing, which means to firstly set $\ to the value
                    of $/, and secondly chops every line read using chop!.

     -n             Causes Ruby to assume the following loop around your
                    script, which makes it iterate over file name arguments
                    somewhat like sed -n or awk.

                          while gets
                            ...
                          end

     -p             Acts mostly same as -n switch, but print the value of
                    variable $_ at the each end of the loop.  For example:

                          % echo matz | ruby -p -e '$_.tr! "a-z", "A-Z"'
                          MATZ

     -i extension   Specifies in-place-edit mode.  The extension, if speci‐
                    fied, is added to old file name to make a backup copy.
                    For example:

                          % echo matz > /tmp/junk
                          % cat /tmp/junk
                          matz
                          % ruby -p -i.bak -e '$_.upcase!' /tmp/junk
                          % cat /tmp/junk
                          MATZ
                          % cat /tmp/junk.bak
                          matz

     -a             Turns on auto-split mode when used with -n or -p.  In
                    auto-split mode, Ruby executes
                          $F = $_.split
                    at beginning of each loop.

     -F pattern     Specifies input field separator ($;).
