# vim: foldmethod=marker ft=markdownlight

# gems {{{1
Dans archlinux, par défaut les gem install se font avec l'option
--user-install, ce qui installe la gem dans ~/.gem
J'ai symlinké ça dans ~/opt/ruby

Pour installer dans GEM_HOME (=~/progs-data/ruby), il suffit de faire
gem install --no-user-install (ou --no-user)

La gem rubygems-tasks permet de faire des Rakefile avec:
  require 'rubygems/tasks'
  Gem::Tasks.new(sign: {checksum: true, pgp: true}, 
                 build: {tar: true}, scm: {status: false})
ce qui active 
  rake build build:gem build:tar 
       scm scm:status scm:push scm:tag
       sign sign:checksum sign:pgp
       console install push release
(par défaut build:tar et sign:checksum sign:pgp ne sont pas activés
 scm:status l'est mais du coup il refuse de faire quoi que ce soit si le repo est dirty
 console lance $RUBYCONSOLE de l'env et sinon irb
 install installe la gem
 push pushe sur rubygems
 release fait build, scm:tag, scm:push, push, sign (pour les tasks qui sont acitvées)

Pour créer un dossier pour la gem:
 mine monprojet --mini-test --markdown --yard --gemspec-yml --bin
   #si on veut markdown il faut utiliser yard plutôt que rdoc car rdoc force le markup à être rdoc
   #gemspec-yml pour faire la spec dans un fichier yaml
   #mini-test pour remplacer rspec qui est le défaut
#}}}

# Liste {{{1
* pry: Remplacement d'irb (cf aussi bond pour l'autocomplétion)
* whenever: Un générateur de crontab
* microoptparse, *thor*, trollop (pour les options, +optparse dans la stdlib)
* Nokogiri: xml parser
* rspec (tests)
* Mocha or Rspec Mocks(for mock objects), fakefs (fake filesystem)
#}}}

Configuration File: {{{1
------------------

+ https://github.com/mbklein/confstruct
  Confstruct is yet another configuration gem. Definable and configurable
  by hash, struct, or block, confstruct aims to provide the flexibility to
  do things your way, while keeping things simple and intuitive.

- https://github.com/binarylogic/settingslogic
  Settingslogic is a simple configuration / settings solution that uses an
  ERB enabled YAML file

- https://github.com/infochimps-labs/configliere
  Wise, discreet configuration for ruby scripts: integrate config files,
  environment variables and command line with no fuss 
}}}1

Extension library {{{1
----------------

- Active Support (from rails)
  cf: hash deep_merge, timezone in Time
- Facets
  cf: memoization, lazy support
- https://github.com/irongaze/iron-extensions
  Une class DSLProxy qui permet de faire des trucs comme
  ploum.instance_eval mais où on peut appeler les méthodes (et variables)
  du self originel, pas seulement celles de ploum
- https://github.com/flori/tins
  des mini trucs
- https://github.com/banister/include_complete
  Des rajouts dans le modèle objet de ruby
  (genre include_complete pour rajouter les singleton methods)
}}}1

Launching commands {{{1
==================
  http://zhangxh.net/programming/ruby/6-ways-to-run-shell-commands-in-ruby/
  http://www.shanison.com/2010/09/01/ruby-capture-output-in-realtime/

- https://github.com/ahoward/open4 #popen, le plus puissant
Ou simplement user IO.popen, mais il ne découple pas stderr et stdout.
open3 est inclus dans la stdlib, pour la plupart des applications ça doit
être suffisant, cf
http://ku1ik.com/2010/09/18/open3-and-the-pid-of-the-spawn.html
en fait open3 est aussi puissant qu'open4 dans ruby1.9, open4 ne sert que
pour ruby 1.8

- Cf aussi http://stackoverflow.com/questions/12189904/fork-child-process-with-timeout-and-capture-output
qui renvoie vers
https://github.com/codegram/spinach/blob/master/features/support/filesystem.rb#L34-68
pour run(command) à base de IO.pipe
(je l'ai incorporé dans dr/shell.rb. Updated: finalement shell.rb contient
la version de methadone qui utilise open3 avec ruby1.9)

- https://github.com/opscode/mixlib-shellout 
un moyen facile de récupérer stdout/stderr, qqs support de stdin (mais moins
puissant que popen)

+ https://github.com/thoughtbot/cocaine
Un équivalent de system("ploum") mais avec des strings qui peuvent être
interpolés, avec escape pour que ça se passe bien
Utilise https://github.com/thoughtbot/climate_control
pour changer une variable d'environnement dans un block

+ https://github.com/jarib/childprocess
ChildProcess est un wrapper pour lancer des process 
  r, w = IO.pipe
  proc = ChildProcess.build("cat", "foo")
  proc.io.stdout = proc.io.stderr = w
  proc.start
  proc.wait
  w.close
  p r.read #=> "test\n"
- Cf aussi
  https://github.com/rtomayko/posix-spawn/tree/master/lib/posix
  pour une implémentation qui utilise égalemnt posix-spawn
- Ou encore
  https://github.com/ahoward/systemu
}}}1

# Input/Output: {{{1
+ https://github.com/janlelis/paint
  Pour la couleur dans les strings
- https://github.com/sickill/rainbow
- https://github.com/flori/term-ansicolor

Table outpout:
+ https://github.com/cldwalker/hirb
- https://github.com/arches/table_print
- https://github.com/visionmedia/terminal-table

Reporting output:
- https://github.com/wbailey/command_line_reporter
- https://github.com/JEG2/highline
  (ask and say)

}}}1

# Testing {{{1
- http://blog.arvidandersson.se/2012/03/28/minimalicous-testing-in-ruby-1-9
Sur minitest
- https://github.com/CapnKernul/minitest-reporters
Pour avoir plus de formats de sortie
- https://github.com/davetron5000/clean_test
Un micro dsl pour minitest (est-ce nécessaire vu qu'on a minitest/spec?)
}}}1

# Options and commands {{{1
Refs: http://www.awesomecommandlineapps.com/gems.html
Ont l'air intéressant:
+ https://github.com/cldwalker/boson
+ https://github.com/davetron5000/methadone
+ https://github.com/davetron5000/gli
+ https://github.com/injekt/slop

- https://github.com/ahoward/main/
Pas mal utilisés
- http://trollop.rubyforge.org/
- https://github.com/wycats/thor
Facile à comprendre:
- https://github.com/florianpilz/micro-optparse
- http://cmdparse.rubyforge.org/
#}}}

# deployment {{{1
- https://github.com/nadarei/mina
# }}}
