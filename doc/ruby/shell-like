# vim: foldmethod=marker ft=markdownlight

#facets {{{1
Numenor ~gems/facets-2.9.3/lib/core/facets/file $ ls
append.rb        create.rb       read_list.rb  split_all.rb
atomic_id.rb     ext.rb          rewrite.rb    split_root.rb
atomic_open.rb   null.rb         rootname.rb   write.rb
atomic_write.rb  read_binary.rb  sanitize.rb   writelines.rb

Numenor ~gems/facets-2.9.3/lib/core/facets $ ls dir
ascend.rb  descend.rb  each_child.rb  multiglob.rb  parent.rb  recurse.rb

Numenor ~gems/facets-2.9.3/lib/standard/facets/fileutils $ ls
amass.rb  head.rb  outofdate.rb  slice.rb  tail.rb  whereis.rb
cp_rx.rb  ln_r.rb  safe_ln.rb    stage.rb  wc.rb    which.rb

# standard/facets/shellwords
rajoute shellwords aux hash et array
}}}1

FileUtils: {{{1
=========

  cd(dir, options)
  cd(dir, options) {|dir| .... }
  pwd()
  mkdir(dir, options)
  mkdir(list, options)
  mkdir_p(dir, options)
  mkdir_p(list, options)
  rmdir(dir, options)
  rmdir(list, options)
  ln(old, new, options)
  ln(list, destdir, options)
  ln_s(old, new, options)
  ln_s(list, destdir, options)
  ln_sf(src, dest, options)
  cp(src, dest, options)
  cp(list, dir, options)
  cp_r(src, dest, options)
  cp_r(list, dir, options)
  mv(src, dest, options)
  mv(list, dir, options)
  rm(list, options)
  rm_r(list, options)
  rm_rf(list, options)
  install(src, dest, mode = <srcs>, options)
  chmod(mode, list, options)
  chmod_R(mode, list, options)
  chown(user, group, list, options)
  chown_R(user, group, list, options)
  touch(list, options)
Low level functions:
  copy_entry(src, dest, preserve = false, dereference = false)
  copy_file(src, dest, preserve = false, dereference = true)
  copy_stream(srcstream, deststream)
  remove_entry(path, force = false)
  remove_entry_secure(path, force = false)
  remove_file(path, force = false)
  compare_file(path_a, path_b)
  compare_stream(stream_a, stream_b)
  uptodate?(file, cmp_list)
module FileUtils::Verbose
  This module has all methods of FileUtils module, but it outputs messages
  before acting. This equates to passing the :verbose flag to methods in
  FileUtils.
module FileUtils::NoWrite
  This module has all methods of FileUtils module, but never changes
  files/directories. This equates to passing the :noop flag to methods in
  FileUtils.
module FileUtils::DryRun
  This module has all methods of FileUtils module, but never changes
  files/directories. This equates to passing the :noop and :verbose flags to
  methods in FileUtils.
}}}1

Dir {{{1
===
    ::[]
    ::chdir
    ::chroot
    ::delete ::rmdir ::unlink
    ::entries
    ::exist?
    ::exists?
    ::foreach
    ::glob
    ::home
    ::mkdir
    ::new
    ::open
    ::pwd ::getwd
    #close
    #each
    #inspect
    #path #to_path
    #pos #tell
    #read
    #rewind
    #seek #pos=
}}}1

Pathname {{{1
========

Core methods
-----------
    These methods are effectively manipulating a String, because that’s all a
    path is. Except for mountpoint?, children, each_child, realdirpath and
    realpath, they don’t access the filesystem.
(Note: la différence entre entries et children c'est que entries sort aussi
'.' et '..')

+ join parent root? absolute? relative? relative_path_from each_filename
cleanpath realpath realdirpath children each_child mountpoint?

File status predicate methods
-------------------------------
    These methods are a facade for FileTest:

blockdev? chardev? directory? executable? executable_real? exist? file?
grpowned? owned? pipe? readable? world_readable? readable_real? setgid? setuid?
size size? socket? sticky? symlink? writable? world_writable? writable_real?
zero?

File property and manipulation methods
-------------------------------------
    These methods are a facade for File:

atime ctime mtime chmod(mode) lchmod(mode) chown(owner, group) lchown(owner,
group) fnmatch(pattern, *args) fnmatch?(pattern, *args) ftype make_link(old)
open(*args, &block) readlink rename(to) stat lstat make_symlink(old)
truncate(length) utime(atime, mtime) basename(*args) dirname extname
expand_path(*args) split 

Directory methods
----------------
    These methods are a facade for Dir:

::glob ::getwd / ::pwd rmdir entries each_entry(&block) mkdir(*args)
opendir(*args) 

IO 
--
    These methods are a facade for IO: 

each_line(*args, &block) read(*args) binread(*args) readlines(*args)
sysopen(*args) 

Utilities
---------
    These methods are a mixture of Find, FileUtils, and others:

find(&block) mkpath rmtree unlink / delete

Special features
---------------

p1 = Pathname.new("/usr/lib")   # Pathname:/usr/lib
p2 = p1 + "ruby/1.8"            # Pathname:/usr/lib/ruby/1.8
p3 = p1.parent                  # Pathname:/usr
p4 = p2.relative_path_from(p3)  # Pathname:lib/ruby/1.8
pwd = Pathname.pwd              # Pathname:/home/gavin
pwd.absolute?                   # true
p5 = Pathname.new "."           # Pathname:.
p5 = p5 + "music/../articles"   # Pathname:music/../articles
p5.cleanpath                    # Pathname:articles
p5.realpath                     # Pathname:/home/gavin/articles
p5.children                     # [Pathname:/home/gavin/articles/linux, ...]
}}}1

Shellwords {{{1
==========
    ::shellescape
Escapes a string so that it can be safely used in a Bourne shell command line.
String#shellescape is a shorthand for this function.

    ::shelljoin
Builds a command line string from an argument list array joining all
elements escaped for Bourne shell and separated by a space.

    ::shellsplit
Splits a string into an array of tokens in the same way the UNIX Bourne shell does
String#shellsplit is a shorthand for this function.
}}}1
