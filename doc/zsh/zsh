vim: ft=markdownlight fdm=marker

See for some nice scripts http://chneukirchen.org/blog/archive/2013/07.html
From tips: http://chneukirchen.org/blog/category/zsh.html
Others:
https://github.com/robbyrussell/oh-my-zsh
https://github.com/sorin-ionescu/prezto #a fork of oh-my-zsh
https://github.com/zsh-users/zaw #a plugin to find content

Glob {{{
====

echo {1..5} #expand in 1,2,...,5
echo {1..5..2} #expand in 1,3,5
echo {001..5} #expand in 001,002,...,005
ls <1-5> #glob on 1..5
}}}
Misc {{{
====

# See http://chneukirchen.org/blog/archive/2008/02/10-zsh-tricks-you-may-not-know.html

<(command) returns the filename (in /dev/fd if supported or as a FIFO) of
the pipe given by command for reading. (For example, use diff <(ruby
foo.rb) <(ruby-1.9 foo.rb) to compare two program outputs).

=(command) expands to a tempfile with the output of command that is deleted
after the line has finished. In effect, the same as <(command) but allows
applications to seek. E.g.: xpdf =(zcat foo.pdf.gz)

## Test if VAR is set

    if (($+VAR))
or portably:
    if [ -n "${VAR+x}" ]

## Test if array contains value
	if [[ -n ${(M)$ARRAY:#${VALUE}} ]] ; then

## Expand a VAR
${=VAR}
}}}

Default bindings {{{
================

Note: Esc-B is also Meta-B
The first group is Emacs mode, the second is vi normal mode, the third is
vi insert mode.

Emacs Mode {{{
I only keep the bindings that are not unbound in emacs mode, but there are
more functions, see 
http://www.cs.elte.hu/zsh-manual/zsh_14.html

Movement
--------

backward-char (^B ESC-[D) (unbound)
    Move backward one character. 
backward-word (ESC-B ESC-b) (unbound) (unbound)
    Move to the beginning of the previous word. 
beginning-of-line (^A) (unbound) (unbound)
    Move to the beginning of the line. If already at the beginning of the line, move to the beginning of the previous line, if any. 
end-of-line (^E) (unbound) (unbound)
    Move to the end of the line. If already at the end of the line, move to the end of the next line, if any. 
forward-char (^F ESC-[C) (unbound) (unbound)
    Move forward one character. 
vi-find-next-char (^X^F) (f) (unbound)
    Read a character from the keyboard, and move to the next occurrence of it in the line. 
forward-word (ESC-F ESC-f) (unbound) (unbound)
    Move to the beginning of the next word. The editor's idea of a word is specified with the WORDCHARS parameter. 
vi-goto-column (ESC-|) (|) (unbound)
    Move to the column specified by the numeric argument. 

History Control
---------------

beginning-of-buffer-or-history (ESC-<) (unbound) (unbound)
    Move to the beginning of the buffer, or if already there, move to the first event in the history list. 
down-line-or-history (^N ESC-[B) (j) (unbound)
    Move down a line in the buffer, or if already at the bottom line, move to the next event in the history list. 
end-of-buffer-or-history (ESC->) (unbound) (unbound)
    Move to the end of the buffer, or if already there, move to the last event in the history list. 
history-incremental-search-backward (^R ^Xr) (unbound) (unbound)
    Search backward incrementally for a specified string. The string may begin with ^ to anchor the search to the beginning of the line.
history-incremental-search-forward (^S ^Xs) (unbound) (unbound)
    Search forward incrementally for a specified string. The string may begin with ^ to anchor the search to the beginning of the line.
history-search-backward (ESC-P ESC-p) (unbound) (unbound)
    Search backward in the history for a line beginning with the first word in the buffer. 
history-search-forward (ESC-N ESC-n) (unbound) (unbound)
    Search forward in the history for a line beginning with the first word in the buffer. 
infer-next-history (^X^N) (unbound) (unbound)
    Search in the history for a line matching the current one and fetch the event following it. 
insert-last-word (ESC-_ ESC-.) (unbound) (unbound)
    Insert the last word from the previous history event at the cursor position. If a positive numeric argument is given, insert that word from the end of the previous history event. If the argument is zero or negative insert that word from the left (zero inserts the previous command word). 
up-line-or-history (^P ESC-[A) (k) (unbound)
    Move up a line in the buffer, or if already at the top line, move to the previous event in the history list. 

Modifying Text
--------------

backward-delete-char (^H ^?) (unbound) (unbound)
    Delete the character behind the cursor. 
backward-kill-word (^W ESC-^H ESC-^?) (unbound) (unbound)
    Kill the word behind the cursor. 
capitalize-word (ESC-C ESC-c) (unbound) (unbound)
    Capitalize the current word and move past it. 
copy-region-as-kill (ESC-W ESC-w) (unbound) (unbound)
    Copy the area from the cursor to the mark to the kill buffer. 
copy-prev-word (ESC-^_) (unbound) (unbound)
    Duplicate the word behind the cursor. 
down-case-word (ESC-L ESC-l) (unbound) (unbound)
    Convert the current word to all lowercase and move past it. 
kill-word (ESC-D ESC-d) (unbound) (unbound)
    Kill the current word. 
vi-join (^X^J) (J) (unbound)
    Join the current line with the next one. 
kill-line (^K) (unbound) (unbound)
    Kill from the cursor to the end of the line. 
kill-buffer (^X^K) (unbound) (unbound)
    Kill the entire buffer. 
kill-whole-line (^U) (unbound) (unbound)
    Kill the current line. 
vi-match-bracket (^X^B) (%) (unbound)
    Move to the bracket character (one of {}, (), or []) that matches the one under the cursor. If the cursor is not on a bracket character, move forward without going past the end of the line to find one, and then go to the matching bracket. 
overwrite-mode (^X^O) (unbound) (unbound)
    Toggle between overwrite mode and insert mode. 
quoted-insert (^V) (unbound) (unbound)
    Insert the next character typed into the buffer literally. An interrupt character will not be inserted. 
vi-quoted-insert (unbound) (unbound) (^Q ^V)
    Display a ^ at the current position, and insert the next character typed into the buffer literally. An interrupt character will not be inserted. 
quote-line (ESC-') (unbound) (unbound)
    Quote the current line; that is, put a ' character at the beginning and the end, and convert all ' characters to \'. 
quote-region (ESC-") (unbound) (unbound)
    Quote the region from the cursor to the mark. 
self-insert (printable characters) (unbound) (printable characters and some control characters)
    Put a character in the buffer at the cursor position. 
self-insert-unmeta (ESC-^I ESC-^J ESC-^M) (unbound) (unbound)
    Put a character in the buffer after stripping the meta bit and converting ^M to ^J. 
transpose-chars (^T) (unbound) (unbound)
    Exchange the two characters to the left of the cursor if at end of line, else exchange the character under the cursor with the character to the left. 
transpose-words (ESC-T ESC-t) (unbound) (unbound)
    Exchange the current word with the one before it. 
up-case-word (ESC-U ESC-u) (unbound) (unbound)
    Convert the current word to all caps and move past it. 
yank (^Y) (unbound) (unbound)
    Insert the contents of the kill buffer at the cursor position. 
yank-pop (ESC-y) (unbound) (unbound)
    Remove the text just yanked, rotate the kill-ring, and yank the new top. Only works following yank or yank-pop. 

Arguments
---------

digit-argument (ESC-0...ESC-9) (1-9) (unbound)
    Start a new numeric argument, or add to the current one. See also vi-digit-or-beginning-of-line. 
neg-argument (ESC--) (unbound) (unbound)
    Changes the sign of the following argument. 

Completion
----------

delete-char-or-list (^D) (unbound) (unbound)
    Delete the character under the cursor. If the cursor is at the end of the line, list possible completions for the current word. 
expand-or-complete (TAB) (unbound) (TAB)
    Attempt shell expansion on the current word. If that fails, attempt completion. 
expand-history (ESC-SPACE ESC-!) (unbound) (unbound)
    Perform history expansion on the edit buffer. 
expand-word (^X*) (unbound) (unbound)
    Attempt shell expansion on the current word. 
list-choices (ESC-^D) (^D=) (^D)
    List possible completions for the current word. 
list-expand (^Xg ^XG) (^G) (^G)
    List the expansion of the current word. 

Miscellaneous
-------------

accept-and-hold (ESC-A ESC-a) (unbound) (unbound)
    Push the contents of the buffer on the buffer stack and execute it. 
accept-line (^J ^M) (^J ^M) (^J ^M)
    Execute the contents of the buffer. 
accept-line-and-down-history (^O) (unbound) (unbound)
    Execute the current line, and push the next history event on the the buffer stack. 
vi-cmd-mode (^X^V) (unbound) (^[)
    Enter command mode; that is, use the alternate keymap. Yes, this is bound by default in emacs mode. 
clear-screen (^L ESC-^L) (^L) (^L)
    Clear the screen and redraw the prompt. 
exchange-point-and-mark (^X^X) (unbound) (unbound)
    Exchange the cursor position with the position of the mark. 
execute-named-cmd (ESC-x) (unbound) (unbound)
    Read the name of a editor command and execute it.
execute-last-named-cmd (ESC-z) (unbound) (unbound)
    Redo the last function executed with execute-named-cmd. 
get-line (ESC-G ESC-g) (unbound) (unbound)
    Pop the top line off the buffer stack and insert it at the cursor position. 
push-line (^Q ESC-Q ESC-q) (unbound) (unbound)
    Push the current buffer onto the buffer stack and clear the buffer. Next time the editor starts up, the buffer will be popped off the top of the buffer stack and loaded into the editing buffer. 
redisplay (unbound) (^R) (^R)
    Redisplays the edit buffer. 
send-break (^G ESC-^G) (unbound) (unbound)
    Abort the current editor function, e.g. execute-named-command, or the editor itself, e.g. if you are in vared. Otherwise abort the parsing of the current line. 
run-help (ESC-H ESC-h) (unbound) (unbound)
    Push the buffer onto the buffer stack, and execute the command run-help cmd, where cmd is the current command. run-help is normally aliased to man. 
set-mark-command (^@) (unbound) (unbound)
    Set the mark at the cursor position. 
spell-word (ESC-$ ESC-S ESC-s) (unbound) (unbound)
    Attempt spelling correction on the current word. 
undefined-key (lots o' keys) (lots o' keys) (unbound)
    Beep. 
undo (^_ ^Xu ^X^U) (unbound) (unbound)
    Incrementally undo the last text modification. 
vi-undo-change (unbound) (u) (unbound)
    Undo the last text modification. If repeated, redo the modification. 
which-command (ESC-?) (unbound) (unbound)
    Push the buffer onto the buffer stack, and execute the command which-command cmd, where cmd is the current command. which-command is normally aliased to whence. 
}}}
Vi mode {{{
Movement
--------

vi-backward-blank-word (unbound) (B) (unbound)
    Move backward one word, where a word is defined as a series of non-blank characters. 
vi-backward-char (unbound) (^H h ^?) (unbound)
    Move backward one character, without changing lines. 
vi-backward-word (unbound) (b) (unbound)
    Move to the beginning of the previous word, vi-style. 
vi-end-of-line (unbound) ($) (unbound)
    Move to the end of the line. If an argument is given to this command, the cursor will be moved to the end of the line (argument - 1) lines down. 
vi-forward-blank-word (unbound) (W) (unbound)
    Move forward one word, where a word is defined as a series of non-blank characters. 
vi-forward-blank-word-end (unbound) (E) (unbound)
    Move to the end of the current word, or, if at the end of the current word, to the end of the next word, where a word is defined as a series of non-blank characters. 
vi-forward-char (unbound) (SPACE l) (unbound)
    Move forward one character. 
vi-find-next-char (^X^F) (f) (unbound)
    Read a character from the keyboard, and move to the next occurrence of it in the line. 
vi-find-next-char-skip (unbound) (t) (unbound)
    Read a character from the keyboard, and move to the position just before the next occurrence of it in the line. 
vi-find-prev-char (unbound) (F) (unbound)
    Read a character from the keyboard, and move to the previous occurrence of it in the line. 
vi-find-prev-char-skip (unbound) (T) (unbound)
    Read a character from the keyboard, and move to the position just after the previous occurrence of it in the line. 
vi-first-non-blank (unbound) (^) (unbound)
    Move to the first non-blank character in the line. 
vi-forward-word (unbound) (w) (unbound)
    Move forward one word, vi-style. 
vi-forward-word-end (unbound) (e) (unbound)
    Move to the end of the next word. 
vi-goto-column (ESC-|) (|) (unbound)
    Move to the column specified by the numeric argument. 
vi-goto-mark (unbound) (`) (unbound)
    Move to the specified mark. 
vi-goto-mark-line (unbound) (') (unbound)
    Move to the beginning of the line containing the specified mark. 
vi-repeat-find (unbound) (;) (unbound)
    Repeat the last vi-find command. 
vi-rev-repeat-find (unbound) (,) (unbound)
    Repeat the last vi-find command in the opposite direction. 

History Control
---------------

down-line-or-history (^N ESC-[B) (j) (unbound)
    Move down a line in the buffer, or if already at the bottom line, move to the next event in the history list. 
vi-down-line-or-history (unbound) (+) (unbound)
    Move down a line in the buffer, or if already at the bottom line, move to the next event in the history list. Then move to the first non-blank character on the line. 
down-history (unbound) (^N) (unbound)
    Move to the next event in the history list. 
vi-fetch-history (unbound) (G) (unbound)
    Fetch the history line specified by the numeric argument. This defaults to the current history line (i.e. the one that isn't history yet). 
vi-history-search-backward (unbound) (/) (unbound)
    Search backward in the history for a specified string. The string may begin with ^ to anchor the search to the beginning of the line.
vi-history-search-forward (unbound) (?) (unbound)
    Search forward in the history for a specified string. The string may begin with ^ to anchor the search to the beginning of the line. The functions available in the mini-buffer are the same as for vi-history-search-backward. 
vi-repeat-search (unbound) (n) (unbound)
    Repeat the last vi history search. 
vi-rev-repeat-search (unbound) (N) (unbound)
    Repeat the last vi history search, but in reverse. 
up-line-or-history (^P ESC-[A) (k) (unbound)
    Move up a line in the buffer, or if already at the top line, move to the previous event in the history list. 
up-history (unbound) (^P) (unbound)
    Move to the previous event in the history list. 

Modifying Text
---------------

vi-add-eol (unbound) (A) (unbound)
    Move to the end of the line and enter insert mode. 
vi-add-next (unbound) (a) (unbound)
    Enter insert mode after the current cursor position, without changing lines.
vi-backward-delete-char (unbound) (X) (^H)
    Delete the character behind the cursor, without changing lines. If in insert mode this won't delete past the point where insert mode was last entered. 
vi-backward-kill-word (unbound) (unbound) (^W)
    Kill the word behind the cursor, without going past the point where insert mode was last entered. 
vi-change (unbound) (c) (unbound)
    Read a movement command from the keyboard, and kill from the cursor position to the endpoint of the movement. Then enter insert mode. If the command is vi-change, kill the current line. 
vi-change-eol (unbound) (C) (unbound)
    Kill to the end of the line and enter insert mode. 
vi-change-whole-line (unbound) (S) (unbound)
    Kill the current line and enter insert mode. 
vi-delete (unbound) (d) (unbound)
    Read a movement command from the keyboard, and kill from the cursor position to the endpoint of the movement. If the command is vi-delete, kill the current line. 
vi-delete-char (unbound) (x) (unbound)
    Delete the character under the cursor, without going past the end of the line. 
vi-indent (unbound) (>) (unbound)
    Indent a number of lines. 
vi-insert (unbound) (i) (unbound)
    Enter insert mode. 
vi-insert-bol (unbound) (I) (unbound)
    Move to the beginning of the line and enter insert mode. 
vi-join (^X^J) (J) (unbound)
    Join the current line with the next one. 
vi-kill-line (unbound) (unbound) (^U)
    Kill from the cursor back to wherever insert mode was last entered. 
vi-kill-eol (unbound) (D) (unbound)
    Kill from the cursor to the end of the line. 
vi-match-bracket (^X^B) (%) (unbound)
    Move to the bracket character (one of {}, (), or []) that matches the one under the cursor. If the cursor is not on a bracket character, move forward without going past the end of the line to find one, and then go to the matching bracket. 
vi-open-line-above (unbound) (O) (unbound)
    Open a line above the cursor and enter insert mode. 
vi-open-line-below (unbound) (o) (unbound)
    Open a line below the cursor and enter insert mode. 
vi-put-before (unbound) (P) (unbound)
    Insert the contents of the kill buffer before the cursor. If the kill buffer contains a sequence of lines (as opposed to characters), paste it above the current line. 
vi-put-after (unbound) (p) (unbound)
    Insert the contents of the kill buffer after the cursor. If the kill buffer contains a sequence of lines (as opposed to characters), paste it below the current line. 
vi-quoted-insert (unbound) (unbound) (^Q ^V)
    Display a ^ at the current position, and insert the next character typed into the buffer literally. An interrupt character will not be inserted. 
vi-replace (unbound) (R) (unbound)
    Enter overwrite mode. 
vi-repeat-change (unbound) (.) (unbound)
    Repeat the last vi mode text modification. If a count was used with the modification, it is remembered. If a count is given to this command, it overrides the remembered count, and is remembered for future uses of this command. The cut buffer specification is similarly remembered. 
vi-replace-chars (unbound) (r) (unbound)
    Replace the character under the cursor with a character read from the keyboard. 
self-insert (printable characters) (unbound) (printable characters and some control characters)
    Put a character in the buffer at the cursor position. 
vi-substitute (unbound) (s) (unbound)
    Substitute the next character(s). 
vi-swap-case (unbound) (~) (unbound)
    Swap the case of the character under the cursor and move past it. 
vi-unindent (unbound) (<) (unbound)
    Unindent a number of lines. 
vi-yank (unbound) (y) (unbound)
    Read a movement command from the keyboard, and copy the region from the cursor position to the endpoint of the movement into the kill buffer. If the command is vi-yank, copy the current line. 
vi-yank-whole-line (unbound) (Y) (unbound)
    Copy the current line into the kill buffer. 
vi-yank-eol
    Copy the region from the cursor position to the end of the line into the kill buffer. Arguably, this is what Y should do in vi, but it isn't what it actually does. 

Arguments
---------

digit-argument (ESC-0...ESC-9) (1-9) (unbound)
    Start a new numeric argument, or add to the current one. See also vi-digit-or-beginning-of-line. 

Completion
----------

expand-or-complete (TAB) (unbound) (TAB)
    Attempt shell expansion on the current word. If that fails, attempt completion. 
list-choices (ESC-^D) (^D=) (^D)
    List possible completions for the current word. 
list-expand (^Xg ^XG) (^G) (^G)
    List the expansion of the current word. 

Miscellaneous
-------------

accept-line (^J ^M) (^J ^M) (^J ^M)
    Execute the contents of the buffer. 
vi-cmd-mode (^X^V) (unbound) (^[)
    Enter command mode; that is, use the alternate keymap. Yes, this is bound by default in emacs mode. 
clear-screen (^L ESC-^L) (^L) (^L)
    Clear the screen and redraw the prompt. 
pound-insert (unbound) (#) (unbound)
    If there is no # character at the beginning of the buffer, add one to the beginning of each line. If there is one, remove a # from each line that has one. In either case, accept the current line. The INTERACTIVE_COMMENTS option must be set for this to have any usefulness. 
vi-set-buffer (unbound) (") (unbound)
    Specify a buffer to be used in the following command. There are 35 buffers that can be specified: the 26 named buffers "a to "z and the nine queued buffers "1 to "9. The named buffers can also be specified as "A to "Z. When a buffer is specified for a cut command, the text being cut replaces the previous contents of the specified buffer. If a named buffer is specified using a capital, the newly cut text is appended to the buffer instead of overwriting it. If no buffer is specified for a cut command, "1 is used, and the contents of "1 to "8 are each shifted along one buffer; the contents of "9 is lost. 
vi-set-mark (unbound) (m) (unbound)
    Set the specified mark at the cursor position. 
undefined-key (lots o' keys) (lots o' keys) (unbound)
    Beep. 
vi-undo-change (unbound) (u) (unbound)
    Undo the last text modification. If repeated, redo the modification. 
vi-digit-or-beginning-of-line(unbound) (0) (unbound)
    If the last command executed was a digit as part of an argument, continue the argument. Otherwise, execute vi-beginning-of-line. 
}}}
}}}

Menu completion {{{
===============

menu select: show list of possibilities, then use menu selection
menu yes: directly complete with first choice (tab cycle, but we are not in the menu)
menu yes select: like menu select, but also directly complete with first choice

force-list always: always show the list, even if there is only one possibility
list:
    This style is used by the _history_complete_word bindable command. If it is set to ‘true’ it has no effect. If it is set to ‘false’ matches will not be listed. This overrides the setting of the options controlling listing behaviour, in particular AUTO_LIST. The context always starts with ‘:completion:history-words’. 

Bindings: http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html#Standard-Widgets
}}}
Completion {{{
==========

http://askql.wordpress.com/2011/01/11/zsh-writing-own-completion/
http://www.linux-mag.com/id/1106/
http://tar-jx.bz/notes/zsh-completion.html
http://wikimatze.de/writing-zsh-completion-for-padrino.html

cf compdef, compctl, compadd in http://zsh.sourceforge.net/Doc/Release/Completion-System.html

En gros pour la complétion, j'ai juste à retenir _arguments (pour les
arguments) et _values (pour spécifier plus finement les valeurs d'une
option). Les _wanted, ... et autre, c'est seulement si j'ai besoin de
spécifier des tags (pour que l'utilisateur puisse customiser s'il veut ces
tags ou pas, moi je m'en fiche un peu pour mes propres fichiers de
complétions).

Si j'utilise des states: soit
    local curcontext="$curcontext" state line 
    _arguments -C 
ou
    local context state line 
    _arguments

Dans la forme *::message:action
quand action est executé, words ne contient plus les options
Dans la forme *:::message:action
quand action est executé, words ne contient plus que les arguments de la forme *
ex: _arguments -C '1: :->country' '*::: :->city' alors dans hello2 France ploum TAB, words contient suelement ploum

Pour les alternatives simples:
_alternative \ 
   'users:user:_users' \ 
   'hosts:host:_hosts'
Peut s'écrire aussi
_arguments - users ':user:_users' - hosts ':host:_hosts'

_message pour un message

Some options to _arguments:
    The  options  -S and -A are available to simplify the specifica‐
    tions for commands with standard option parsing.   With  -S,  no
    option  will  be  completed after a `--' appearing on its own on
    the line; this argument will otherwise be ignored; hence in  the
    line
           foobar -x -- -y
    the  `-x'  is considered an option but the `-y' is considered an
    argument, while the `--' is considered to be neither.
    With -A, no options will be completed after the first non-option
    argument  on  the  line.   The  -A must be followed by a pattern
    matching all strings which are not to  be  taken  as  arguments.
    For  example,  to  make _arguments stop completing options after
    the first normal argument, but  ignoring  all  strings  starting
    with  a hyphen even if they are not described by one of the opt‐
    specs, the form is `-A "-*"'.

    By default, options are multi-character name, one `-word'
    per  option.   With -s, options may be single characters,
    with more than one option per word, although words start‐
    ing  with two hyphens, such as `--prefix', are still con‐
    sidered complete option  names.   This  is  suitable  for
    standard GNU options.
ex: with ruby optparse $ unison.rb '--*-completion-zsh'
#compdef 
typeset -A opt_args
local context state line
_arguments -s -S \
  "-b[unison batch mode]" \
  ...
}}}

# Redirections {{{

http://zsh.sourceforge.net/Doc/Release/Redirection.html
  date >foo >bar
writes the date to two files, named ‘foo’ and ‘bar’. Note that a pipe is an
implicit redirection; thus
  date >foo | cat
writes the date to the file ‘foo’, and also pipes it to cat. 

  zcat blabla.gz > >(commande1) > >(commande2) > >(commande3) > >(commande4)
Avec tee:
  zcat blabla.gz | tee -i >(commande1) >(commande2) >(commande3) | commande4

}}}
