https://wiki.archlinux.org/index.php/PKGBUILD
https://wiki.archlinux.org/index.php/creating_packages

Options [excerpt]
-------

-c: clean files
-d: don't check deps
-o: download and extract, but don't build
-e: don't extract, only build
--verifysource: only download sources and perform integrity checks
-f: overrides an already build package
-g: generate integrity checks; ex makepkg -g >> PKGBUILD
-i: install built package
-L: logs to $logdest/pkgname-pkgver-pkgrel-arch.log
-R: Repackage contents of the package without rebuilding the package.
-s: install missing dependencies with pacman (-r to remove them after succesfull build)
-S: build a source-only (PKGBUILD) tarball
--allsource: build a full source-only (PKGBUILD+ the real source code) tarball
--pkg: only build listed packages from a split package
--check/--nocheck: run/don't run the check() function
--sign/--nosign: sign/don't sign the package
--noconfirm,--needed,--asdeps: Passed to pacman

Variables defined by makepkg
----------------------------
startdir
    This contains the absolute path to the directory where the PKGBUILD file is located.
srcdir (for me: build/src)
    This points to the directory where makepkg extracts or symlinks all files in the source array. 
pkgdir (for me: build/pkg)
    This points to the directory where makepkg bundles the installed package, which becomes the root directory of your built package. 

Variables
---------

pkgname, pkgver, pkgrel, and arch are all mandatory
license is not mandatory, but a warning is printed if omited

pkgname: The name of the package. It should consist of alphanumeric and any of the following characters @ . _ + -
pkgver: The version of the package.
pkgrel: The release number of the package specific to Arch Linux.
pkgdir: This variable reflects the root directory of what will be put into the package. It is commonly used in make DESTDIR="$pkgdir" install
epoch: Used to force the package to be seen as newer than any previous versions with a lower epoch, even if the version number would normally not trigger such an upgrade. 
pkgbase: An optional global directive is available when building a split package, pkgbase is used to refer to the group of packages in the output of makepkg and in the naming of source-only tarballs.
pkgdesc: The description of the package.
arch: An array of architectures that the PKGBUILD file is known to build and work on.
url: The URL of the official site of the software being packaged. 
license: The license under which the software is distributed.
groups: The group the package belongs in. For instance, when you install the kdebase package, it installs all packages that belong in the kde group. 
depends: An array of package names that must be installed before this software can be run
optdepends: An array of package names that are not needed for the software to function but provides additional features
makedepends: An array of package names that must be installed to build the software but unnecessary for using the software after installation.
checkdepends: An array of packages this package depends on to run its test suite but are not needed at runtime.
provides: An array of package names that this package provides the features of (or a virtual package such as cron or sh).
conflicts: An array of package names that may cause problems with this package if installed
replaces: An array of obsolete package names that are replaced by this package, e.g. replaces=('wireshark') for the wireshark-gtk package
backup: An array of files that can contain user-made changes and should be preserved during upgrade or removal of a package, primarily intended for configuration files in /etc.
options: This array allows you to override some of the default behavior of makepkg, defined in /etc/makepkg.conf
install: The name of the .install script to be included in the package. pacman has the ability to store and execute a package-specific script when it installs, removes or upgrades a package. pacman chroot() and then chdir() to the root directory in every install script executed. The script contains the following functions which run at different times:
  - pre_install - The script is run right before files are extracted. One argument is passed: new package version.
  - post_install - The script is run right after files are extracted. One argument is passed: new package version.
  - pre_upgrade - The script is run right before files are extracted. Two arguments are passed in the following order: new package version, old package version.
  - post_upgrade - The script is run right after files are extracted. Two arguments are passed in the following order: new package version, old package version.
  - pre_remove - The script is run right before files are removed. One argument is passed: old package version.
  - post_remove - The script is run right after files are removed. One argument is passed: old package version.
changelog: The name of the package changelog. To view changelogs for installed packages (that have this file): pacman -Qc pkgname
source: An array of files which are needed to build the package (e.g. source=("https://example.com/$pkgname-$pkgver.tar.gz")). 
noextract: An array of files listed under the source array which should not be extracted from their archive format by makepkg
md5sums/sha1sums/sha256sums/sha384sums/sha512sums: An array of MD5 checksums of the files listed in the source array (use 'SKIP' to skip the test for a source file)

Functions called
----------------

# pkgver() function

You can update the pkgver variable during a makepkg. pkgver() is run right after the sources are fetched and extracted. 

# prepare() function

In this function, commands that are used to prepare sources for building are run, such as patching. This function is run before the build function and after package extraction. If extraction is skipped (makepkg -e), then prepare() is not run.

# build() function

This function uses common shell commands in Bash syntax to automatically compile software and create a pkg directory to install the software to.
The first step in the build() function is to change into the directory created by uncompressing the source tarball ($srcdir); therefore, in most cases, the first command will look like this:
  cd "$pkgname-$pkgver"
  ./configure --prefix=/usr
  make

# check() function

Place for calls to make check and similar testing routines (like make check)

# package() function

(run with fakeroot)
The final step is to put the compiled files in a directory where makepkg can retrieve them to create a package. This by default is the pkg directoryâ€”a simple fakeroot environment. The pkg directory replicates the hierarchy of the root file system of the software's installation paths.
  ex: make DESTDIR="$pkgdir/" install

Check the archive
-----------------

You can use pacman's query functions to display a list of files contained in the package and the dependencies it requires with pacman -Qlp [package file] and pacman -Qip [package file] respectively. 

$ namcap PKGBUILD
$ namcap <package file name>.pkg.tar.xz

Example
=======

# $Id: PKGBUILD 198596 2013-10-30 16:56:01Z bisson $
# Maintainer: Gaetan Bisson <bisson@archlinux.org>
# Contributor: Andrea Scarpino <andrea@archlinux.org>

pkgname=libmpdclient
pkgver=2.9
pkgrel=1
pkgdesc='Asynchronous API library for interfacing MPD in the C, C++ & Objective C languages'
url='http://www.musicpd.org/libs/libmpdclient/'
license=('custom:BSD')
arch=('i686' 'x86_64')
source=("http://www.musicpd.org/download/${pkgname}/${pkgver%.*}/${pkgname}-${pkgver}.tar.xz")
sha1sums=('1a3557d4d1f78085db6285a8c8cb9085c300d9d3')

build() {
  cd "${pkgname}-${pkgver}"
  ./configure --prefix=/usr --disable-documentation
  make
}

package() {
  cd "${pkgname}-${pkgver}"
  make DESTDIR="${pkgdir}" install
  cd "${pkgdir}"
  install -d usr/share/licenses/libmpdclient
  ln -s ../../doc/libmpdclient/COPYING usr/share/licenses/libmpdclient/COPYING
}

Exemple 2
=========

http://ix.io/66p
# Maintainer: Somebody <somebody[at]foo[dot]tld>
pkgname=foo
pkgver=10.0.2
pkgrel=2
pkgdesc="Foo is an example package for this PKGBUILD file."
url="http://www.foo.tld"
arch=('x86_64' 'i686')
license=('GPLv3')
depends=('php' 'mysql')
optdepends=('java-runtime')
makedepends=()
conflicts=()
replaces=()
backup=()
install='foo.install'
source=("http://www.server.tld/${pkgname}-${pkgver}.tar.gz"
        "foo.desktop")
md5sums=('a0afa52d60cea6c0363a2a8cb39a4095'
         'a0afa52d60cea6c0363a2a8cb39a4095')

build() {
  cd "${srcdir}/${pkgname}-${pkgver}"
  cmake ./ -DCMAKE_INSTALL_PREFIX=/usr
  make
}

package() {
  cd "${srcdir}/${pkgname}-${pkgver}"
  make DESTDIR="${pkgdir}" install
  install -Dm644 COPYING "$pkgdir/usr/share/licenses/$pkgname/COPYING"
}

# vim:set ts=2 sw=2 et:
