http://wiki.bash-hackers.org/howto/getopts_tutorial
Note: getopt vs getopts (builtin) http://stackoverflow.com/questions/402377/using-getopts-in-bash-shell-script-to-get-long-and-short-command-line-options
=> getopt accepts long options, and simply massage the command line:
   $ getopt -o abc: --long help,verbose: -- -abcploum --verbose=full
     -a -b -c 'ploum' --verbose 'full' --
   In bash: OPTS=$(getopt ... "$@")
            eval set -- "$OPTS"
            while true; do case $1 ... esac; done

getopts OPTSTRING VARNAME [ARGS...]
- OPTSTRING	tells getopts which options to expect and where to expect arguments (see below)
- VARNAME	tells getopts which shell-variable to use for option reporting
- ARGS	tells getopts to parse these optional words instead of the positional parameters

getopts fAx VARNAME
=> parse flags -f -A -x
getopts fA:x VARNAME
=> parse flags -f -x, -A argument

getopts :... => silent error reporting mode

Verbose Mode:
- invalid option => VARNAME is set to ? (question-mark) and OPTARG is unset
  and an error message is printed
  './test_getopts.sh: illegal option -- e'
- required argument not found => VARNAME is set to ? (question-mark),
  OPTARG is unset and an error message is printed
  './test_getopts.sh: option requires an argument -- C'
Silent Mode:
- invalid option => VARNAME is set to ? (question-mark) and OPTARG is set to the (invalid) option character
- required argument not found => VARNAME is set to : (colon) and OPTARG contains the option-character in question

Used variables
- OPTIND: Holds the index to the next argument to be processed. This is how
  getopts "remembers" its own status between invocations. Also useful to
  shift the positional parameters after processing with getopts. OPTIND is
  initially set to 1, and needs to be re-set to 1 if you want to parse
  anything again with getopts
  => to get the rest of the arguments: shift $((OPTIND-1))
- OPTARG: This variable is set to any argument for an option found by
  getopts. It also contains the option flag of an unknown option.
- OPTERR: (Values 0 or 1) Indicates if Bash should display error messages
  generated by the getopts builtin. The value is initialized to 1 on every
  shell startup - so be sure to always set it to 0 if you don't want to see
  annoying messages! OPTERR is not specified by POSIX for the getopts
  builtin utility â€” only for the C getopt() function in unistd.h (opterr).
  OPTERR is bash-specific and not supported by shells such as ksh93, mksh,
  zsh, or dash. 
  Note: this is only valid in 'verbose mode', and simply don't print the errors

Exemple:
#!/bin/sh
die() { printf "$1\n" "${@:2}"; exit 1; } >&2
usage() { echo "Usage: ${0##*/} -C ploum -d -h plam"; }

while getopts ':C:dh' flag; do
  case $flag in
    C) pacman_config=$OPTARG ;;
    d) directory=1 ;;
    h) usage ;;
    :) usage; die '%s: option requires an argument -- '\''%s'\' "${0##*/}" "$OPTARG" ;;
    ?) usage; die '%s: invalid option -- '\''%s'\' "${0##*/}" "$OPTARG" ;;
  esac
done
shift $(( OPTIND - 1 ))
echo "$@"
