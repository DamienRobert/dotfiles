https://btrfs.wiki.kernel.org/index.php/Btrfs%28command%29

Raid 1:
#Use raid1 for both data and metadata
mkfs.btrfs -L label -m raid1 -d raid1 /dev/sdb /dev/sdc

See subvolumes:
sudo btrfs subvolume list -atu /

Copy on write
=============

https://btrfs.wiki.kernel.org/index.php/FAQ#Can_copy-on-write_be_turned_off_for_data_blocks.3F
https://wiki.archlinux.org/index.php/Btrfs#Copy-On-Write_.28CoW.29
- For a device, mount it with nodatacow
- For a folder, use `chattr +C folder`, the files inside will then have the '+C' attributes on
  (Works for newly created files. For others we need to recreate them, cf the script https://github.com/stsquad/scripts/blob/master/uncow.py)
Example for a raw image:
  touch vm-image.raw
  chattr +C vm-image.raw
  fallocate -l10g vm-image.raw

Defrag
======

Defrag the journal: (speed-up systemd boot)
btrfs filesystem defrag /var/log/journal/*/*

Defrag full disk
sudo btrfs filesystem defrag -rv /

From: https://wiki.archlinux.org/index.php/Btrfs#Defragmentation
Btrfs supports online defragmentation. To defragment the metadata of the root folder do:
    btrfs filesystem defragment /
This will not defragment the entire file system. For more information read this page on the btrfs wiki.
To defragment the entire file system verbosely:
    btrfs filesystem defragment -r -v /
Note: The command above will defragment only file data. To defragment directory metadata for every directory in the file system, run this command:
    find / -xdev -type d -print -exec btrfs filesystem defragment '{}' \;

Other commands
==============

#balance
 What does "balance" do?
btrfs filesystem balance is an operation which simply takes all of the data and metadata on the filesystem, and re-writes it in a different place on the disks, passing it through the allocator algorithm on the way. It was originally designed for multi-device filesystems, to spread data more evenly across the devices (i.e. to "balance" their usage). This is particularly useful when adding new devices to a nearly-full filesystem.
Due to the way that balance works, it also has some useful side-effects:
    If there is a lot of allocated but unused data or metadata chunks, a balance may reclaim some of that allocated space. This is the main reason for running a balance on a single-device filesystem.
    On a filesystem with damaged replication (e.g. a RAID-1 FS with a dead and removed disk), it will force the FS to rebuild the missing copy of the data on one of the currently active devices, restoring the RAID-1 capability of the filesystem. 

#scrub
btrfs scrub is used to scrub a btrfs filesystem, which will reading all data from all disks and verifying checksums. 

Slow mount times
================

Slow mount times are usually caused by large log trees and fragmented
metadata. Try the autodefrag mount option and btrfs fi defrag -clzo -t 2M
-r /home (defragment files over 2M in size, recompress with lzo,
recursively), btrfs balance start /home (and wait for btrfs-endio-wri to
calm down or check with balance status, this takes some time)
If those don't help enough, try checking (but not repairing) the device
with btrfsck, and, if it's clean, clear the logs with btrfs-zero-image
after backing up the metadata with btrfs-image (consult the btrfs mailing
list or IRC first, I am not an expert in this).
