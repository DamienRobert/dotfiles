vim: ft=markdownlight fdm=expr

Install: gem install chef
See also chefdk aur package/chef-dk gem; chef-workstation aur

* Tutorial:
- https://learn.chef.io/
- http://gettingstartedwithchef.com/

* Chef through ssh:
- http://mivok.net/2015/05/19/chef-provisioning-ssh.html
- http://matschaffer.github.io/knife-solo/
- http://higanworks.com/knife-zero/
+ New official tool: chef-run from chef-workstation https://www.chef.sh/docs/chef-workstation/getting-started/
  chef workstation will replace chefdk

Toread: http://neverstopbuilding.com/chef-broiler-plate

Software
========

ChefDK contains:
- Chef Infra Client: chef-solo, chef-zero, knife, ohai + chef
- Test Kitchen: integration framework, uses wm to test chef cookbook
- Cookstyle: linter, replace Foodcritic
- ChefSpec: rspec based unit testing, testing chef recipes in memory but not really executing anything
- Chef Inspec
+ Berkshelf (dependency manager), chef-vault, ...

Chef Workstation: ChefDK +
- chef-run

Binaries:
- berks: berkshelf
- chef: create cookbook
- chef-client: client of a chef server, chef-client -z: run a local cookbook
- chef-apply: apply a recipe, wrapper around chef-solo
- chef-solo: run a cookbook without a chef server [deprecated in favor of chef-zero; in newer version it is just a wrapper around 'chef-client -z']
- chef-client: connect to a chef-server and run a cookbook
- chef-zero: a local chef server [note chef-client -z|--local-mode set up a chef-zero local server automatically]
- chef-vault: vault
- chef-shell: debuguer
- cookstyle: linter
- inspec: test machines
- knife: communicate with a chef server
- kitchen: test kitchen
- ohai: machine info
- push-apply, pushy-client, pushy-service-manager: push jobs https://docs.chef.io/push_jobs.html
- delivery: ??

Other tools:
- habitat https://www.habitat.sh/
  docker like with a nging approach + a gossip supervisor
- inspec https://www.chef.io/inspec/
  open-source testing framework for infrastructure with a human-readable language for specifying compliance, security and other policy requirements.
- chef-automate: wrapper around chef+habitat+inspec

Plugins
-------

chef-provisioning => provision a machine via a driver
chef-provisioning-ssh => ssh driver
knife-zero: wrapper around chef-zero https://github.com/higanworks/knife-zero
knife-solo: wrapper around chef-solo https://github.com/matschaffer/knife-solo [Deprecated]

Testkitchen
-----------
http://kitchen.ci/

Given an .kitchen.yml file [like the one generated by kitchen init
--driver=kitchen-vagrant]:
    ---
    driver:
      name: vagrant
    provisioner:
      name: chef_zero
    platforms:
      - name: centos-7.1
      - name: ubuntu-14.04
      - name: windows-2012r2
    suites:
      - name: client
        run_list:
          - recipe[postgresql::client]
      - name: server
        run_list:
          - recipe[postgresql::server]
One can use
- kitchen create default-ubuntu-1204
  -> create a vagrant instance using kitchen-vagrant
     https://github.com/test-kitchen/kitchen-vagrant
- kitchen converge default-ubuntu-1204
  -> Installs chef on the vm using https://github.com/chef/vagrant-omnibus
     [hooks into the Vagrant provisioning middleware when Vagrant tries to
     install chef to install the omnibus chef], then run the provisioner on
     the vm
- kitchen list, kitchen login, kitchen destroy

kitchen-vagrant platforms:
  -> A vagrant driver that works by generating a single Vagrantfile for
  each instance in a sandboxed directory. Since the Vagrantfile is written
  out on disk, Vagrant needs absolutely no knowledge of Test Kitchen. So no
  Vagrant plugins are required.
  It predicts the Vagrant box name and download URL for a select number of platforms platforms built by the bento project https://github.com/chef/bento [Packer definitions for building minimal Vagrant baseboxes]:
Ex:
   platforms:
     - name: ubuntu-10.04
-> platforms:
     - name: ubuntu-10.04
       driver:
         box: opscode-ubuntu-10.04
         box_url: https://opscode-vm-bento.s3.amazonaws.com/vagrant/virtualbox/opscode_ubuntu-10.04_chef-provisionerless.box

Bootstrapping
=============

Omnibus
-------

* https://github.com/chef/omnibus "Easily create full-stack installers for your project across a variety of platforms."
Tutorial: https://scoutapm.com/blog/omnibus-tutorial-package-a-standalone-ruby-gem

Omnibus chef recipe: https://github.com/chef/omnibus-chef
Now in https://github.com/chef/chef/tree/master/omnibus
=> Use the omnibus software to build chef.
- On the current platform:
  $ bundle exec omnibus build <PROJECT>
- On another platform:
  $ bundle exec kitchen converge <PROJECT>-ubuntu-1204
  Use testkitchen to start the ubuntu-1204 vm, then converge
  the omnibus cookbook https://github.com/opscode-cookbooks/omnibus
  [handled via berkshelf] to install omnibus on the vm. Then one can do a
  omnibus build on the vm:
  $ bundle exec kitchen login <PROJECT>-ubuntu-1204
  $ cd omnibus-chef
  $ bundle install --without development # Don't install dev tools!
  $ bundle exec omnibus build <PROJECT> -l internal

Omnitruck
---------

* omnitruck api: https://docs.chef.io/api_omnitruck.html
  $ https://omnitruck.chef.io/stable/chef/metadata?p=ubuntu&pv=16.04&m=x86_64
  => sha1 5cffd42496bb3cb0c9179a72a807ec47f52cc816 sha256 352963b736e5c9f9e4ae56e918d710eab00f59e4e11d34abf60677f0fda5226c url https://packages.chef.io/files/stable/chef/15.3.14/ubuntu/16.04/chef_15.3.14-1_amd64.deb version 15.3.14
  $ https://omnitruck.chef.io/stable/chef/download?p=ubuntu&pv=16.04&m=x86_64
  => download the .deb url directly
  [note: www.chef.io/<channel>/<project>/metadata?p=... works too]

  The channels are stable and current, cf https://docs.chef.io/packages.html
  [but mixlib-install also has an unstable channel]

* Packages api:
  - versions: https://packages.chef.io/api/v1/stable/chef/versions
    { "results" : [ {
        "repo" : "omnibus-stable-local",
        "path" : "com/getchef/chef/12.0.3/debian/6",
        "name" : "chef_12.0.3-1_amd64.deb",
        "type" : "file",
        "size" : 39752872,
        "created" : "2014-12-16T18:32:46.187Z",
        "created_by" : "jenkins",
        "modified" : "2014-12-16T18:32:46.178Z",
        "modified_by" : "jenkins",
        "updated" : "2014-12-16T18:32:46.178Z",
        "properties" : [ {
          "key" : "omnibus.version",
          "value" : "12.0.3"
        } ]

  - artifact for a version: https://packages.chef.io/api/v1/stable/chef/15.3.14/artifacts
    "results" : [ {
      "repo" : "omnibus-stable-local",
      "path" : "com/getchef/chef/15.3.14/debian/9",
      "name" : "chef_15.3.14-1_amd64.deb",
      "properties" : [ {
        "key" : "omnibus.iteration",
        "value" : "1"
      }, {
        "key" : "omnibus.version",
        "value" : "15.3.14"
      }, {
        "key" : "md5",
        "value" : "c4c6c6bb8ef9b2a3583e13cea7c0d98f"
      }, {
        "key" : "omnibus.architecture",
        "value" : "x86_64"
      }, {...

  - package: https://packages.chef.io/files/channel/project/version/platform/platform_version/filename (filename is the "name": property)

* omnitruck: curl -L https://www.chef.io/chef/install.sh | sudo bash
  [Note: this script was generated by mixlib-install 3.11.5, the newer
  version 3.11.21 now use the omnitruck.chef.io api]

  Cf https://docs.chef.io/install_omnibus.html
   The Omnitruck install script does the following:
   -  Detects the platform, version, and architecture of the machine on which the installer is to be executed
   -  Fetches the appropriate package, for the requested product and version
      (using the omnitruck api above)
   -  Validates the package content by comparing SHA-256 checksums
   -  Installs the package
  Not compatible with archlinux, cf https://docs.chef.io/api_omnitruck.html
  for a list of supported platforms

  Options: -c channel, -P project (default: chef), -v version (default: latest)
  -s once (skip if product already exist)

  => Get metadata informations
    metadata_url="https://www.chef.io/$channel/$project/metadata?v=$version&p=$platform&pv=$platform_version&m=$machine"
  => And install the specified package there (which may be a .deb, .rpm and
  .sh script)

* knife bootstrap, cf ~bundle/chef-12.4.1/lib/chef/knife/bootstrap/templates
  https://docs.chef.io/install_bootstrap.html

  The chef-full template uses omnitruck above but there was also the
  archlinux-gems template. What the chef-full template does is to find a
  downloader like curl,python,perl,wget to download omnitruck chef at
  www.chef.io/chef/install.sh and then run it. It then does post
  configuration for chef client like pem config files, ohai hints and so on.

* mixlib-install: https://github.com/chef/mixlib-install

  Mixlib::Install.new(options) #cf options.rb for options
  => .artifact_info => Backend.info(options)
  => .available_versions => Backend.available_versions
  => .download_artifact => fetch the package url
  => .install_command => Generator.install_command(options) [ie the omnitruck install script with the channel, product and version already specified]
  + root, current_version, upgrade_available?, detect_platform
  + self.install_sh => Mixlib::Install::Generator::Bourne.install_sh
    [ie the generic omnitruck install script that does option parsing]

  $ mixlib-install install-script is what generates the install.sh script above
  => Mixlib::Install.install_sh(context)

  $ mixlib-install download
  => Mixlib::Install.new(options).download_artifact

  $ mixlib-install list-versions
  Mixlib::Install.available_versions(...)

  Note: 
  - backend/package_router.rb: contains the "https://packages.chef.io" endpoint
    via the api /api/v1/channel/project/versions
                /api/v1/channel/project/version/artifacts
    The packages are in files/channel/project/version/platform/platform_version/filename
    and metadata in files/channel/project/version/platform/platform_version/filename.metadata.json
    => Backend.available_versions, Backend.info (return object of type ArtifactInfo defined in artifact_info.rb)
  - product.rb contain all products
  - generator.rb: create install.sh script
  - script_generator.rb is not used here (but was used by chef-provision)
    it create an sh command that fetches the omnitruck install.sh url,
    fetches it and run it (with some env vars already set).
    [it is strange that it did not generate the install script directly
    via Mixlib::Install.install_sh...]

* Archlinux installation
  See the wiki https://wiki.archlinux.org/index.php/Chef to install directly from omnibus-chef sources
  Aur:
  - https://aur.archlinux.org/packages/chef-dk/ (simply uses the deb tarball, install in /opt/chefdk)
    https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=chef-dk
  - https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=chef-workstation
    (itoo)
    chefdk_binaries="berks chef chef-apply chef-client chef-shell chef-solo chef-vault cookstyle dco delivery foodcritic inspec kitchen knife ohai push-apply pushy-client pushy-service-manager"
    binaries="chef-run chefx $chefdk_binaries"

[ Deprecated
- chef-provision: [Chef Provisioning was officially end-of-life on August 31, 2019]
  https://github.com/chef/chef-provisioning/blob/master/docs/faq.md
  
  => downloads https://www.chef.io/chef/install.sh and install it, see
  Cf https://github.com/chef/chef-provisioning/blob/master/lib/chef/provisioning/convergence_strategy/install_sh.rb
  which uses mixlib-install:
  install_command=Mixlib::Install::ScriptGenerator.new(chef_version, false, opts).install_command
  Then run install_command on the remote.
  There is also install_cached.rb which download a package (.deb,.rpm, or the omnitruck .sh) (from the machine metadata), upload it to the target machine and install it
  The package meta data is fetched at https://www.chef.io/chef/metadata?v=...
  which is probably not available anymore, now its at omnitruck.chef.io

- knife solo bootstrap, cf ~bundle/knife-solo-0.4.2/lib/knife-solo/bootstraps/linux.rb or https://github.com/matschaffer/knife-solo/blob/master/lib/knife-solo/bootstraps/linux.rb
  -> sudo pacman -Sy ruby rsync make gcc --noconfirm --needed
     sudo gem install chef --no-user-install --no-rdoc --no-ri
]

Recipes list
============

- deploy: https://docs.chef.io/resource_deploy.html
- archlinux recipes: https://github.com/logankoester/chef-archlinux

Usage
======

chef-apply recipe_file

Cookbook creation:
$ chef generate cookbook COOKBOOK
sudo chef-client --local-mode --runlist 'recipe[COOKBOOK]'

├── CHANGELOG.md
├── LICENSE
├── Policyfile.rb
├── README.md
├── chefignore
├── kitchen.yml
├── metadata.rb
├── recipes
│   └── default.rb
├── spec
│   ├── spec_helper.rb
│   └── unit
│       └── recipes
│           └── default_spec.rb
└── test
    └── integration
        └── default
            └── default_test.rb

OHAI
====
https://docs.chef.io/ohai.html

Cf the binary ohai to get information on the computer without chef
require 'ohai'; Ohai::System.new.all_plugins
