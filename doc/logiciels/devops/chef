Install: gem install chef
See also chefdk aur package/chef-dk gem; chef-workstation aur

Tutorial:
- https://learn.chef.io/
- http://gettingstartedwithchef.com/

Chef through ssh:
- http://mivok.net/2015/05/19/chef-provisioning-ssh.html
- http://matschaffer.github.io/knife-solo/
- http://higanworks.com/knife-zero/
+ New official tool: chef-run from chef-workstation https://www.chef.sh/docs/chef-workstation/getting-started/
  chef workstation will replace chefdk

Toread: http://neverstopbuilding.com/chef-broiler-plate

Softwares
=========

ChefDK contains:
- An early version of a brand new command-line tool, chef, that aims to streamline Chef workflow, starting with new generators.
- The well-known cookbook dependency manager Berkshelf 3.0.
  cf http://berkshelf.com/
- The Test Kitchen integration testing framework.
  [integration framework, uses wm to test chef cookbook]
- ChefSpec, which makes unit testing cookbooks a breeze.
  [rspec based unit testing, testing chef recipes in memory but not really
  executing anything]
- Foodcritic, a linting tool for doing static code analysis on cookbooks.
  [a lint tool for chef]
- Chef Vault: manage secrets
- All of the Chef tools you're already familiar with: Chef Client, Knife, Ohai and Chef Zero.

chef-apply: apply a recipe, wrapper around chef-solo
chef-solo: run a cookbook without a chef server [deprecated in favor of chef-zero; in newer version it is just a wrapper around 'chef-client -z']
chef-client: connect to a chef-server and run a cookbook
chef-zero: a local chef server [note chef-client -z|--local-mode set up a chef-zero local server automatically]

Other tools:
- habitat https://www.habitat.sh/
  docker like with a nging approach + a gossip supervisor
- inspec https://www.chef.io/inspec/
  open-source testing framework for infrastructure with a human-readable language for specifying compliance, security and other policy requirements.
- chef-automate: wrapper around chef+habitat+inspec

Plugins
-------

chef-provisioning => provision a machine via a driver
chef-provisioning-ssh => ssh driver
knife-zero: wrapper around chef-zero https://github.com/higanworks/knife-zero
knife-solo: wrapper around chef-solo https://github.com/matschaffer/knife-solo [Deprecated]

Building
--------
https://github.com/chef/omnibus-chef

Use the omnibus software to build chef.
- On the current platform:
  $ bundle exec omnibus build <PROJECT>
- On another platform:
  $ bundle exec kitchen converge <PROJECT>-ubuntu-1204
  Use testkitchen to start the ubuntu-1204 vm, then converge
  the omnibus cookbook https://github.com/opscode-cookbooks/omnibus
  [handled via berkshelf] to install omnibus on the vm. Then one can do a
  omnibus build on the vm:
  $ bundle exec kitchen login <PROJECT>-ubuntu-1204
  $ cd omnibus-chef
  $ bundle install --without development # Don't install dev tools!
  $ bundle exec omnibus build <PROJECT> -l internal

Testkitchen
-----------
http://kitchen.ci/

Given an .kitchen.yml file [like the one generated by kitchen init
--driver=kitchen-vagrant]:
    ---
    driver:
      name: vagrant
    provisioner:
      name: chef_zero
    platforms:
      - name: centos-7.1
      - name: ubuntu-14.04
      - name: windows-2012r2
    suites:
      - name: client
        run_list:
          - recipe[postgresql::client]
      - name: server
        run_list:
          - recipe[postgresql::server]
One can use
- kitchen create default-ubuntu-1204
  -> create a vagrant instance using kitchen-vagrant
     https://github.com/test-kitchen/kitchen-vagrant
- kitchen converge default-ubuntu-1204
  -> Installs chef on the vm using https://github.com/chef/vagrant-omnibus
     [hooks into the Vagrant provisioning middleware when Vagrant tries to
     install chef to install the omnibus chef], then run the provisioner on
     the vm
- kitchen list, kitchen login, kitchen destroy

kitchen-vagrant platforms:
  -> A vagrant driver that works by generating a single Vagrantfile for
  each instance in a sandboxed directory. Since the Vagrantfile is written
  out on disk, Vagrant needs absolutely no knowledge of Test Kitchen. So no
  Vagrant plugins are required.
  It predicts the Vagrant box name and download URL for a select number of platforms platforms built by the bento project https://github.com/chef/bento [Packer definitions for building minimal Vagrant baseboxes]:
Ex:
   platforms:
     - name: ubuntu-10.04
-> platforms:
     - name: ubuntu-10.04
       driver:
         box: opscode-ubuntu-10.04
         box_url: https://opscode-vm-bento.s3.amazonaws.com/vagrant/virtualbox/opscode_ubuntu-10.04_chef-provisionerless.box

Bootstrapping
=============
- omnitruck: curl -L https://www.chef.io/chef/install.sh | sudo bash
  [Using omnibus: https://github.com/chef/omnibus "Easily create full-stack installers for your project across a variety of platforms."
   See: https://docs.chef.io/install_omnibus.html:
   The Omnitruck install script does the following:
   -  Detects the platform, version, and architecture of the machine on which the installer is to be executed
   -  Fetches the appropriate package, for the requested product and version
   -  Validates the package content by comparing SHA-256 checksums
   -  Installs the package
  Note: one could also install chefdk this way but the omnitruck install.sh
  only support chef client now.
  Not compatible with archlinux, cf https://docs.chef.io/api_omnitruck.html
  for a list of supported platforms]
  => Get metadata informations
     metadata_url="https://omnitruck-direct.chef.io/$channel/$project/metadata?v=$version&p=$platform&pv=$platform_version&m=$machine"
  => And install the specified package there
- knife bootstrap, cf ~bundle/chef-12.4.1/lib/chef/knife/bootstrap/templates
  [The chef-full template uses omnitruck above but there was also the
  archlinux-gems template. What the chef-full template does is to find a
  downloader like curl,python,perl,wget to download omnisbus chef at
  www.chef.io/chef/install.sh and then run it. It then does post
  configuration for chef client like pem config files and so on.]
- chef-provision:
  https://github.com/chef/chef-provisioning/blob/master/docs/faq.md
  [downloads https://www.chef.io/chef/install.sh and install it, see
  https://github.com/chef/chef-provisioning/blob/master/lib/chef/provisioning/convergence_strategy/install_sh.rb
  Update: this is now in install_cached.rb]
- knife solo bootstrap, cf ~bundle/knife-solo-0.4.2/lib/knife-solo/bootstraps/linux.rb or https://github.com/matschaffer/knife-solo/blob/master/lib/knife-solo/bootstraps/linux.rb
  -> sudo pacman -Sy ruby rsync make gcc --noconfirm --needed
     sudo gem install chef --no-user-install --no-rdoc --no-ri
- Archlinux installation
  aur: https://aur.archlinux.org/packages/chef-dk/
  See also the wiki https://wiki.archlinux.org/index.php/Chef
  to install directly from omnibus-chef sources

Recipes
=======
- deploy: https://docs.chef.io/resource_deploy.html
- archlinux recipes: https://github.com/logankoester/chef-archlinux

Usage
======
chef-apply recipe_file

Cookbook creation:
$ knife cookbook create COOKBOOK #deprecated
provision
├── CHANGELOG.md
├── README.md
├── attributes
├── definitions
├── files
│   └── default
├── libraries
├── metadata.rb
├── providers
├── recipes
│   └── default.rb
├── resources
└── templates
    └── default
$ chef generate cookbook COOKBOOK #more modern
foo
├── Berksfile
├── README.md
├── chefignore
├── metadata.rb
├── recipes
│   └── default.rb
├── spec
│   ├── spec_helper.rb
│   └── unit
│       └── recipes
│           └── default_spec.rb
└── test
    └── integration
        ├── default
        │   └── serverspec
        │       └── default_spec.rb
        └── helpers
            └── serverspec
                └── spec_helper.rb

sudo chef-client --local-mode --runlist 'recipe[COOKBOOK]'

OHAI
====
https://docs.chef.io/ohai.html

Cf the binary ohai to get information on the computer without chef
require 'ohai'; Ohai::System.new.all_plugins
