Virtual Box
===========
https://wiki.archlinux.org/index.php/VirtualBox
sudo modprobe vboxdrv #Load virtual box kernel module

Config: .config/VirtualBox/VirtualBox.xml

VirtualBox Folders
------------------
#this is ~/VirtualBox\ VMs by default which is ugly
VBOXDIR=$HOME/var/spool/VirtualBox
vboxmanage setproperty machinefolder $VBOXDIR
mkdir -p $VBOXDIR && chattr +C $VBOXDIR

Run
---
VirtualBox --startwm ArchVM
VBoxHeadless --startwm ArchVM

VBoxManage
----------
VBoxManage modifyvm "VM name" --natpf1 "guestssh,tcp,,44601,,22"
VBoxManage modifyvm "VM name" --natpf1 "guestsshinit,tcp,,44699,,2222"
 #ssh redirection (done automatically by vagrant: local:2222->guest:22)

Uefi: VBoxManage modifyvm "VM name" --firmware efi
cf https://www.virtualbox.org/manual/ch03.html#efi

Image conversion
----------------
https://en.wikibooks.org/wiki/QEMU/Images#Converting_image_formats
https://wiki.archlinux.org/index.php/VirtualBox#Disk_image_format_conversion

Tools to convert images:
https://www.virtualbox.org/manual/ch08.html#vboxmanage-clonevdi
- VBoxManage clonehd
- VBoxManage convertfromraw [was convertdd]

Ex: Convert from qemu image:
    qemu-img convert WindowsXP.img -O raw WindowsXP.raw
    VBoxManage convertfromraw WindowsXP.raw WindowsXP.vdi
    VBoxManage modifyvdi WindowsXP.vdi compact
Directly with recent qemu: qemu-img convert -O vdi test.qcow2 test.vdi

Networking
----------
https://www.virtualbox.org/manual/ch06.html
- Not attached
- Network Address Translation (NAT) [Default]
- NAT Network: like a home router, grouping the systems using it into a network and preventing systems outside of this network from directly accessing systems inside it
- Bridged networking
- Internal networking: connect only to the other wms
- Host-only networking: connect to the host via a bridge, but not to the
  external network

Quemu
=====
https://wiki.archlinux.org/index.php/QEMU
http://wiki.qemu.org/download/qemu-doc.html

Uefi: install the ovmf firmware
Images: https://en.wikibooks.org/wiki/QEMU/Images

Qemu networking: http://wiki.qemu.org/Documentation/Networking
The default is User Networking (SLIRP) [NAT Like]

Examples
--------

BIOS=/usr/share/ovmf/ovmf_x64.bin
exec qemu-system-x86_64 \
     -display none \
     -machine accel=kvm \
     -m 256 \ #256MO ram
     -bios $BIOS \
     -netdev user,hostfwd=tcp::10022-:22,hostfwd=tcp::12345-:12345 \
     $@
#Use the host linux kernel:
qemu \
    -kernel /boot/vmlinuz-linux \
    -initrd /boot/initramfs-linux-fallback.img \
    -append "root=/dev/sda2 console=tty0 console=ttyS0 rw systemd.unit=multi-user.target" \

BIOS=/usr/share/ovmf/ovmf_x64.bin
qemu-system-x86_64 -machine accel=kvm -m 256 -bios $BIOS -drive format=raw,file=/var/lib/machines/archlinux.raw
qemu-system-x86_64 -machine accel=kvm -m 256 -kernel /boot/vmlinuz-linux -initrd /boot/initramfs-linux-fallback.img -append "root=/dev/sda2 rw" -drive format=raw,file=/var/lib/machines/archlinux.raw

Options
-------

-snapshot
    Write to temporary files instead of disk image files. In this case, the raw disk image you use is not written back. You can however force the write back by pressing <C-a s> (see section Disk Images). 
-serial dev
    Redirect the virtual serial port to host character device dev. The default device is vc in graphical mode and stdio in non graphical mode. 
-enable-kvm
    Enable KVM full virtualization support. This option is only available if KVM support is enabled when compiling. [Deprecated in favor of -machine accel=kvm]
-smp n
    Simulate an SMP system with n CPUs
-cpu model
-net nic
    Create a new Network Interface Card and connect it to VLAN n (n = 0 is the default).
-net user
    Use the user mode network stack which requires no administrator privilege to run.
