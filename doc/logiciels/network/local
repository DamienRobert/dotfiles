Private local addresses
=======================
https://en.wikipedia.org/wiki/Private_network
http://rays-notebook.info/computing/net-explore.html

IPv4:
10.0.0.0/8 (255.0.0.0): single class A network
172.[16-31].0.0/12 (255.240.0.0): 16 contiguous class B networks
192.168.0.0/16 (255.255.0.0): 256 contiguous class C networks

IPv6: fd00::/8
Prefix: fd
Global random id: 12:3456:789a
Interface Id: 0001
=> Subnet: fd12:3456:789a:1::/64
Address: 0000:0000:0000:0001
=> IPv6 address: fd12:3456:789a:1::1

Link local addresses
====================

https://en.wikipedia.org/wiki/Link-local_address
169.254.0.0/16
fe80::/10

Mac to link local:
http://ben.akrin.com/?p=1347
http://www.tcpipguide.com/free/t_IPv6InterfaceIdentifiersandPhysicalAddressMapping-2.htm
  take the mac address: for example 52:74:f2:b1:a8:7f
  throw ff:fe in the middle: 52:74:f2:ff:fe:b1:a8:7f
  reformat to IPv6 notation 5274:f2ff:feb1:a87f
  convert the first octet from hexadecimal to binary: 52 -> 01010010
  invert the bit at index 6 (counting from 0): 01010010 -> 01010000
  convert octet back to hexadecimal: 01010000 -> 50
  replace first octet with newly calculated one: 5074:f2ff:feb1:a87f
  prepend the link-local prefix: fe80::5074:f2ff:feb1:a87f


IPV6
====

IPv4-mapped IPv6 addresses
::ffff:192.0.2.128

::/0 Default unicast
2002::/16 6to4
2001::/32 Toredo tunneling
fc00::/7 Unique local address [currently fd00::/8 is used for private addresses]

Multicast
=========
http://www.iana.org/assignments/ipv6-multicast-addresses/ipv6-multicast-addresses.xhtml
https://en.wikipedia.org/wiki/Multicast_address

Ipv4 Multicast
224.0.0.1 	The All Hosts multicast group addresses all hosts on the same network segment.
224.0.0.2 	The All Routers multicast group addresses all routers on the same network segment.

Ipv6 Multicast
Node-Local Scope Multicast Addresses
FF01:0:0:0:0:0:0:1 	All Nodes Address
FF01:0:0:0:0:0:0:2 	All Routers Address
Link-Local Scope Multicast Addresses
FF02:0:0:0:0:0:0:1 	All Nodes Address
FF02:0:0:0:0:0:0:2 	All Routers Address
Site-Local:
FF05:0:0:0:0:0:0:2 	All Routers Address

=> ping ff02::1%wlan0 #to see who is connected to wlan0

DNS
===

getent hosts www.google.com #the adress used by the dns from nsswitch.conf
getent ahosts www.google.com #return all adresses

nsswitch.conf: hosts: files mymachines resolve myhostname dns

files: /etc/hosts, /etc/passwd and /etc/group

https://www.freedesktop.org/software/systemd/man/nss-myhostname.html
- The local, configured hostname is resolved to all locally configured IP
  addresses ordered by their scope, or — if none are configured — the IPv4
  address 127.0.0.2 (which is on the local loopback) and the IPv6 address
  ::1 (which is the local host).
- The hostname "localhost" (as well as any hostname ending in ".localhost",
  ".localdomain" or equal to "localdomain") is resolved to the IP addresses
  127.0.0.1 and ::1.
- The hostname "gateway" is resolved to all current default routing gateway
  addresses, ordered by their metric. This assigns a stable hostname to the
  current gateway, useful for referencing it independently of the current
  network configuration state.

https://www.freedesktop.org/software/systemd/man/nss-mymachines.html
The container names are resolved to the IP addresses of the specific container, ordered by their scope.

zeroconf
========
Protocol: upnp/zeroconf
http://www.zeroconf.org/zeroconfandupnp.html
=> services autodetection

https://www.eiman.tv/blog/posts/lannames/
LLMNR (windows) =~ mDNS (apple/avahi)
=> local name resolution

ipv4ll: link local address for ipv4

ipv6 router advertissement: 
- https://community.infoblox.com/t5/IPv6-Center-of-Excellence/Why-You-Must-Use-ICMPv6-Router-Advertisements-RAs/ba-p/3416
- http://strugglers.net/~andy/blog/2011/09/04/linux-ipv6-router-advertisements-and-forwarding/
- https://en.wikipedia.org/wiki/IPv6_address#Stateless_address_autoconfiguration

avahi
=====
ssd start avahi-daemon
Browse: avahi-browse -alr
        avahi-discover
mdns resolution: https://wiki.archlinux.org/index.php/Avahi#Hostname_resolution
-> install nss-mdns and add to /etc/nsswitch.conf:
   hosts: ... mdns_minimal [NOTFOUND=return] resolve [!UNAVAIL=return] dns ...

systemd
=======

resolved support llmnr: https://www.freedesktop.org/software/systemd/man/resolved.conf.html

networkd support lldp, llmnr, and ipv4ll:
LLDP: Link Layer Discovery Protocol
LLMNR: Link-Local Multicast Name Resolution
ipv4ll: link local adress, 169.254.0.0/16
  NEWS
        * LLDP support has been extended, and both passive (receive-only) and
          active (sender) modes are supported. Passive mode ("routers-only") is
          enabled by default in systemd-networkd. Active LLDP mode is enabled
          by default for containers on the internal network. The "networkctl
          lldp" command may be used to list information gathered. "networkctl
          status" will also show basic LLDP information on connected peers now.

  systemd-network:
       LinkLocalAddressing=
           Enables link-local address autoconfiguration. Accepts "yes", "no",
           "ipv4", or "ipv6". Defaults to "ipv6".
       IPv4LLRoute=
           A boolean. When true, sets up the route needed for non-IPv4LL hosts
           to communicate with IPv4LL-only hosts. Defaults to false.
       LLMNR=
           A boolean or "resolve". When true, enables Link-Local Multicast
           Name Resolution[1] on the link. When set to "resolve", only
           resolution is enabled, but not host registration and announcement.
           Defaults to true. This setting is read by systemd-resolved.service(8).

  resolved.conf:
       LLMNR=["yes"]
           Takes a boolean argument or "resolve". Controls Link-Local
           Multicast Name Resolution support (RFC 4794[1]) on the local host.
           If true, enables full LLMNR responder and resolver support. If
           false, disables both. If set to "resolve", only resolution support
           is enabled, but responding is disabled. Note that systemd-
           networkd.service(8) also maintains per-link LLMNR settings. LLMNR
           will be enabled on a link only if the per-link and the global
           setting is on.

#with systemd-nspawn -n, the container get a dhcp address (and a ipv4ll)
$ cat 80-container-host0.network
[Match]
Virtualization=container
Name=host0

[Network]
DHCP=yes
LinkLocalAddressing=yes

[DHCP]
UseTimezone=yes

#On the host we use a dhcpserver for the ve-* adress
$ cat 80-container-ve.network
[Match]
Name=ve-*
Driver=veth

[Network]
# Default to using a /28 prefix, giving up to 13 addresses per container.
Address=0.0.0.0/28
LinkLocalAddressing=yes
DHCPServer=yes
IPMasquerade=yes
