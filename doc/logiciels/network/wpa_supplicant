#Enable with networkd:
ssd start wpa_supplicant@wlan0.service
ssd restart systemd-networkd

#Stoping:
ssd stop wpa_supplicant@wlan0
sudo netctl start wlan0-Clery01

#wpa_cli
reconfigure #to reload the configuration file
scan
scan_results
status
terminate

list_networks
add_network
set_network 0 ssid "MYSSID"
set_network 0 psk "passphrase" #enter without quote to pass the hash directly; hash generated by wpa_passphrase
#set_network 0 key-mgmt NONE
enable_network 0
save_config

enable_network <network id> = enable a network
disable_network <network id> = disable a network
select_network <network id> = select a network (disable others)

#identity ssid <identity>
#password ssid <password>

#To protect the passwords:
xargs -n 2 wpa_passphrase
  ssid
  passphrase

$ ~/syst/network $ wpa_passphrase ploum ploumplam
network={
  ssid="ploum"
  #psk="ploumplam"
  psk=8d2228b50a0936622d8ce984cad47ee70bb16998ec45db095e9b0838d02551a4
}

#In PEAP
network={
  ssid="eduroam"
  scan_ssid=1
  key_mgmt=WPA-EAP
  eap=PEAP
  identity="username"
  password="pass"
  phase1="peaplabel=0"
  phase2="auth=MSCHAPV2"
}
#See: http://unix.stackexchange.com/questions/74500/wpa-supplicant-store-password-as-hash-wpa-eap-with-phase2-auth-pap
password=hash:<nt_hash_of_password_here>
where <nt_hash_of_password_here> is generated by
echo -n password_here | iconv -t utf16le | openssl md4
#warning: only for MSCHAPV2, not for PAP which needs the original password
#so this does not work for Eduroam :-(

Configuration
=============

- proto: list of accepted protocols
WPA = WPA/IEEE 802.11i/D3.0
RSN = WPA2/IEEE 802.11i (also WPA2 can be used as an alias for RSN)
If not set, this defaults to: WPA RSN

- key_mgmt: list of accepted authenticated key management protocols
WPA-PSK = WPA pre-shared key (this requires 'psk' field)
WPA-EAP = WPA using EAP authentication
IEEE8021X = IEEE 802.1X using EAP authentication and (optionally) dynamically
      generated WEP keys
NONE = WPA is not used; plaintext or static WEP could be used
WPA-PSK-SHA256 = Like WPA-PSK but using stronger SHA256-based algorithms
WPA-EAP-SHA256 = Like WPA-EAP but using stronger SHA256-based algorithms
If not set, this defaults to: WPA-PSK WPA-EAP

- pairwise: list of accepted pairwise (unicast) ciphers for WPA
CCMP = AES in Counter mode with CBC-MAC [RFC 3610, IEEE 802.11i/D7.0]
TKIP = Temporal Key Integrity Protocol [IEEE 802.11i/D7.0]
NONE = Use only Group Keys (deprecated, should not be included if APs support
      pairwise keys)
If not set, this defaults to: CCMP TKIP

- group: list of accepted group (broadcast/multicast) ciphers for WPA
CCMP = AES in Counter mode with CBC-MAC [RFC 3610, IEEE 802.11i/D7.0]
TKIP = Temporal Key Integrity Protocol [IEEE 802.11i/D7.0]
WEP104 = WEP (Wired Equivalent Privacy) with 104-bit key
WEP40 = WEP (Wired Equivalent Privacy) with 40-bit key [IEEE 802.11]
If not set, this defaults to: CCMP TKIP WEP104 WEP40

Following fields are only used with internal EAP implementation.
- eap: space-separated list of accepted EAP methods
      MD5 = EAP-MD5 (unsecure and does not generate keying material ->
                      cannot be used with WPA; to be used as a Phase 2 method
                      with EAP-PEAP or EAP-TTLS)
      MSCHAPV2 = EAP-MSCHAPv2 (cannot be used separately with WPA; to be used
              as a Phase 2 method with EAP-PEAP or EAP-TTLS)
      OTP = EAP-OTP (cannot be used separately with WPA; to be used
              as a Phase 2 method with EAP-PEAP or EAP-TTLS)
      GTC = EAP-GTC (cannot be used separately with WPA; to be used
              as a Phase 2 method with EAP-PEAP or EAP-TTLS)
      TLS = EAP-TLS (client and server certificate)
      PEAP = EAP-PEAP (with tunnelled EAP authentication)
      TTLS = EAP-TTLS (with tunnelled EAP or PAP/CHAP/MSCHAP/MSCHAPV2
                       authentication)
      If not set, all compiled in methods are allowed.
- phase2: Phase2 (inner authentication with TLS tunnel) parameters
       (string with field-value pairs, e.g., "auth=MSCHAPV2" for EAP-PEAP or
       "autheap=MSCHAPV2 autheap=MD5" for EAP-TTLS)

Examples:
=========

ctrl_interface=DIR=/run/wpa_supplicant GROUP=network

#Reuse global variables from /etc/wpa_supplicant/wpa_supplicant.conf
eapol_version=1
ap_scan=1
fast_reauth=1

#No passwords
network={
  key_mgmt=NONE
  ssid="Hyundai Hotel"
  id_str="wlan0-Hyundai Hotel"
}

#wpa
network={
  proto=RSN WPA
  psk="espaceclery17"
  ssid="Clery03"
  id_str="wlan0-Clery03"
}

#wpa password hashed
network={
  proto=RSN WPA
  psk=5da8522df6d5e11fbbba8ac460370e5c8fbd028c9a8e505acc6ab43a0d991578
  ssid="LapinouBlanc"
  id_str="wlan0-LapinouBlanc"
}

#wep
network={
  ssid="freeboxgaby"
  key_mgmt=NONE
  wep_key0=7000CAAFA3
  #wep_tx_keyidx=0
}
# wep_key0..3: Static WEP key (ASCII in double quotation, e.g. "abcde" or
# hex without quotation, e.g., 0102030405)
# wep_tx_keyidx: Default WEP key index (TX) (0..3)

#WPA-EAP-TTLS
network={
  ssid="eduroam"
  key_mgmt=WPA-EAP
  eap=TTLS
  group=CCMP TKIP
  pairwise=CCMP TKIP
  anonymous_identity="anonymous@orga.fr"
  identity="username"
  password=hash:123456789
  priority=1
  #phase2="auth=PAP"
  phase2="auth=MSCHAPV2" #this won't work for eduroam, but pap does not accept a hash
}
#hash don't work with auth=PAP
