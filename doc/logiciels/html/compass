[Deprecated, kept for bookkeeping]
http://compass-style.org/reference/compass/

# compass commands
compass init [--bare] / compass create my_extension --using compass/extension
compass watch
compass compile -e production

compass frameworks #list frameworks
compass install compass/ellipsis #install this framework
 #see http://compass-style.org/frameworks/
compass unpack extension #unpack an extension
 #see http://compass-style.org/help/tutorials/extensions/
compass extension list/install/uninstall #wrapper around rubygem

# config.rb
Ex: in the config file, images_dir="images" and http_path = "/" then
background: image-url("vieux_pont.jpg")
gives url('/images/vieux_pont.jpg?1431613653')
and setting http_images_path="foo/images"
gives background: url('foo/images/vieux_pont.jpg?1431613653');
and setting relative_asset=true give
background: url('../images/vieux_pont.jpg?1431613653');
Note that if relative_asset=true then compass does not take into account the ht
p_images_path variable.

Default: http://compass-style.org/help/documentation/configuration-reference/
http_path = "/"
css_dir = "stylesheets"
sass_dir = "sass"
images_dir = "images"
javascripts_dir = "javascripts"

Used by (cf core/sass_extensions/functions/urls.rb):
- font-url -> fonts_dir
- image-url -> images_dir
- stylesheet-url -> css_dir
- generated-image-url -> generated_images_dir
Also: sass_dir: where to take the sass files, css_dir: where to put them
  (only when using 'compass', not when using 'sass --compass' which does not re
d 'config.rb')

# compass gems
- compass: the gem responsible for the compass command
  (+ some sass extensions like the sprite generator)
- compass-core: the gem responsible for most of the sass extensions and stylesh
ets
- compass-import-once: This plugin changes the behavior of Sass's `@import` directive so that if the same sass file is imported more than once, the second import will be a no-op. Usage from sass: sass -r 'compass/import-once/activate' ...

# Compass from sass directly
sass --compass --update project.scss //reads config.rb
Ex using susy: sass --compass -r susy style.scss //susy detects when it is required to add its load path to sass, otherwise the solution would be to pass -I susy_loadpath
See also `compass imports` to generate the load paths needed by sass:
  => -I /home/dams/opt/pkgmgr/gems/gems/compass-core-1.0.3/stylesheets

Without the --compass option:
_project-setup.scss
    $debug-confirmation: true;
    $project-path: absolute-path(join-file-segments(".."));
    @import "compass/configuration";
    $compass-options: (http_path: "/"); #what we would put in config.rb
    @include compass-configuration($compass-options);
project.scss
    @import "project-setup";
sass -r compass-core -I `compass import` project.scss
Note: this does not take into account the settings in config.rb. Note that here '-r compass-core' is required to understand the 'http_path' function; but if we were using only compass stylesheets we would just need the '-I ...'

Essentially the compass binary reads config.rb and passes these options to sass

From ruby:
~~~ ruby
require 'compass'
Compass.add_project_configuration 'config.rb'
sass "...", Compass.sass_engine_options #this includes the compass sass load_paths
#Note that by looking at the source code of sass_scss.rb, the --compass
#option does
      Compass.add_project_configuration #reads config.rb
      Compass.configuration.project_path ||= Dir.pwd
      @options[:for_engine][:load_paths] ||= []
      @options[:for_engine][:load_paths] += Compass.configuration.sass_load_paths
#so it set up the sass load paths, but not the full options generated by
#Compass.sass_engine_options from 'config.rb' like
#'output_style=:compressed' (ie :style => :compress)
~~~

# With webgen:
ext/init.rb:
  require 'compass'
  Compass.add_project_configuration(@ext_dir+'/compass/config.rb')
  @website.ext.sass_load_paths += Compass.configuration.sass_load_paths
  website.config['content_processor.sass.options']=Compass.sass_engine_options

ext/compass/config.rb
  images_dir = "my_images"
  relative_asset=true
  output_style = :compressed

src/stylesheets/main.scss
  @import "compass/css3/columns";
  @import "compass/css3/border-radius";

