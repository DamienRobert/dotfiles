<% code executé 1 %>
<% code executé 2 -%>
% code executé 3
<%= valeur%>

Remarque: faire <% puts ploum> n'est pas ce qu'on veut, erb va construire
une variable en rajoutant les résultats qui sont dans <%=> ou qui ne sont
pas dans des <%>, et l'afficher à la fin. Les puts seront affichés avant le
fichier donc.

erb -T mode  # Specifies trim mode (default 0):
  0  EOL remains after the embedded ruby script is evaluated.
  1  EOL is removed if the line ends with %>.
  2  EOL is removed if the line starts with <% and ends with %>.
  -  EOL is removed if the line ends with -%>.
     And leading whitespaces are removed if the erb directive starts with <%-.
Ex:
%ploum #new line tjrs enlevée
<% ploum -%> #new line enlevée en -T - (erreur dans les autres modes...)
<% ploum %>  #new line enlevée en -T 2 et -T 1
<% plo \
  um %>  #new line enlevée en -T 1

# erb -T 2 semble un bon défaut

In ruby: https://ruby-doc.org/stdlib-2.4.0/libdoc/erb/rdoc/ERB.html
ERB.new(str, safe_level=nil, trim_mode=nil, eoutvar='_erbout')
- %  enables Ruby code processing for lines beginning with %
- <> omit newline for lines starting with <% and ending in %>
- >  omit newline for lines ending in %>
- -  omit blank lines ending in -%>

ERB#def_class, def_method, def_module
~~~ ruby
filename = 'example.rhtml'   # 'arg1' and 'arg2' are used in example.rhtml
erb = ERB.new(File.read(filename))
erb.filename = filename
MyModule = erb.def_module('render(arg1, arg2)')
class MyClass
  include MyModule
end
print MyClass.new.render('foo', 123)
~~~

erubis
======
(au moins erubis ne considère pas la newline après <% %> comme une new line
 --trim=true par défaut)

Erubis n'enlève pas la new line dans les <%= %>, pour le faire, utiliser:
<%= -%> ou <%= =%>

enhancers:
  StringBuffer  : use a String object for buffering
  ArrayBuffer   : use an Array object for buffering (included in Eruby class)
  StringIO      : use a StringIO object for buffering
# Ie respecivement le buffer _buf est construit via _buf="", [], ou
# StringIO.new. Je pense que j'ai classé par ordre d'efficacité, _buf=""
# est le défaut.

  Interpolation : convert '<p><%=text%></p>' into '_buf << %Q`<p>#{text}</p>`'
# Ca doit être un peu plus rapide

  Stdout        : use $stdout instead of array buffer or string buffer
  PrintOut      : use print statement instead of '_buf << ...'
#Avantage: on peut mettre des print, ils seront dans l'ordre. Inconvénient: il
#n'y a plus de buffering, donc ça doit être un peut plus lent. Par contre entre
#Stdout et PrintOut, en pratique je ne vois pas trop de diff...

  PrintEnabled  : enable to use print function in '<% %>'
# Une autre méthode pour pouvoir mixer les print, tout en gardant _buf="" ou [].
# Désavantage: ne marche qu'avec print (qui est modifiée, pas puts)

  Array         : return array instead of string
=> implique ArrayBuffer

  HeaderFooter  : allow header/footer in document (ex. '<!--#header: #-->')
# <!--#header: def list_items(list) #-->
# <%  for item in list %> <li><%= item %></li> <%  end %>
# <!--#footer: end #-->

  BiPattern     : another embedded expression pattern (default '[= =]').
  Erbout        : set '_erbout = _buf = "";' to be compatible with ERB.
  Escape        : switch '<%= %>' to escaped and '<%== %>' to unescaped

  DeleteIndent  : delete indentation of HTML.
# enlève l'indent des balises html
  NoCode        : remove code and leave text (useful when validating HTML)
  NoText        : remove text and leave code (useful when debugging)
  PercentLine   : regard lines starting with '%' as program code
  PrefixedLine  : regard lines matched to '^[   ]*%' as program code
# ie execute '  % a program code' even if there is space before '%'

Props:
     --escapefunc=nil          : escape function name
# La fonction applée dans <%== %>
# Dans eruby: @escapefunc ||= "Erubis::XmlHelper.escape_xml"
     --pattern="<% %>"         : embed pattern
     --trim=true               : trim spaces around <% ... %>
     --preamble=nil            : preamble (no preamble when false)
     --postamble=nil           : postamble (no postamble when false)
# Pour changer le preambule et le postambule (qui dépendent du langage)
# Il vaut mieux utiliser HeaderFooter pour un préambule qui arrive avant le préambule comme _buf="" propre au langage
     --escape=nil              : escape expression or not in default
# Activer ou pas l'escapement (ça fait la même chose que -E EscapeFunc)

Options:
  -x            : show converted code
  -X            : show converted code, only ruby code and no text part
# Shortcuts pour -E NoCode/NoText
  -N            : numbering: add line numbers            (for '-x/-X')
  -U            : unique: compress empty lines to a line (for '-x/-X')
  -C            : compact: remove empty lines            (for '-x/-X')
  -b            : body only: no preamble nor postamble   (for '-x/-X')
  -z            : syntax checking

  -e            : escape (equal to '--E Escape')
  -p pattern    : embedded pattern (default '<% %>')
  -l lang       : convert but no execute (ruby/php/c/cpp/java/scheme/perl/js)
  -E e1,e2,...  : enhancer names (Escape, PercentLine, BiPattern, ...)
  -c context    : context data string (yaml inline style or ruby code)
  -f datafile   : context data file ('*.yaml', '*.yml', or '*.rb')
  -T            : don't expand tab characters in YAML file
  -S            : convert mapping key from string to symbol in YAML file
  -B            : invoke 'result(binding)' instead of 'evaluate(context)'
#result(binding) is what erb does, but this pass local variables of the
#ruby program calling eruby/erb into the erb template evaluated
#When using erubis, this is like using
#eruby.result(binding) rather than eruby.evaluate(context)
