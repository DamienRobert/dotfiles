Etc.getlogin => "dams"

Password
--------

Etc.getpwuid(1000) / Etc.getpwnam("dams")
=> #<struct Etc::Passwd
 name="dams",
 passwd="x",
 uid=1000,
 gid=1000,
 gecos="Damien Robert",
 dir="/home/dams",
 shell="/bin/zsh">

Etc.passwd(&b) => Etc::Passwd.each(&b)
Etc.passwd => Etc.getpwent: return the next password entry (`Etc.setpwent` to rewind, `Etc.endpwent` to close the file)

Group
-----

Etc.getgrgid(1000) / Etc.getgrname("dams")
=> #<struct Etc::Group name="dams", passwd="x", gid=1000, mem=[]>

Etc.group(&b) => Etc::Group.each(&b)
Etc.group => Etc.getgrent (Etc.setgrent, Etc.endgrent)

Misc
----

Etc.sysconfdir => "/etc"
Etc.systmpdir => "/tmp"

Etc.uname
=> {:sysname=>"Linux",
 :nodename=>"doriath",
 :release=>"4.18.4-arch1-1-ARCH",
 :version=>"#1 SMP PREEMPT Wed Aug 22 07:33:26 UTC 2018",
 :machine=>"x86_64"}

Etc.sysconf(Etc::SC_ARG_MAX) #=> 2097152
Etc.sysconf(Etc::SC_LOGIN_NAME_MAX) #=> 256 //cf les constantes SC_
Etc.confstr(Etc::CS_GNU_LIBC_VERSION) #=> "glibc 2.28"
Etc.confstr(Etc::CS_GNU_LIBPTHREAD_VERSION) #=> "NPTL 2.28" //cf les constantes CS_

Etc.nprocessors => 4

IO.pipe {|r, w|
  p w.pathconf(Etc::PC_PIPE_BUF) #=> 4096 // cf les constantes PC_
}


Structs
=======
    /* Define-const: Passwd
     *
     * Passwd is a Struct that contains the following members:
     *
     * name::
     *	    contains the short login name of the user as a String.
     * passwd::
     *	    contains the encrypted password of the user as a String.
     *	    an 'x' is returned if shadow passwords are in use. An '*' is returned
     *      if the user cannot log in using a password.
     * uid::
     *	    contains the integer user ID (uid) of the user.
     * gid::
     *	    contains the integer group ID (gid) of the user's primary group.
     * dir::
     *	    contains the path to the home directory of the user as a String.
     * shell::
     *	    contains the path to the login shell of the user as a String.
     *
     * === The following members below are optional, and must be compiled with special flags:
     *
     * gecos::
     *     contains a longer String description of the user, such as
     *	   a full name. Some Unix systems provide structured information in the
     *     gecos field, but this is system-dependent.
     *     must be compiled with +HAVE_STRUCT_PASSWD_PW_GECOS+
     * change::
     *     password change time(integer) must be compiled with +HAVE_STRUCT_PASSWD_PW_CHANGE+
     * quota::
     *     quota value(integer) must be compiled with +HAVE_STRUCT_PASSWD_PW_QUOTA+
     * age::
     *     password age(integer) must be compiled with +HAVE_STRUCT_PASSWD_PW_AGE+
     * class::
     *     user access class(string) must be compiled with +HAVE_STRUCT_PASSWD_PW_CLASS+
     * comment::
     *     comment(string) must be compiled with +HAVE_STRUCT_PASSWD_PW_COMMENT+
     * expire::
     *	    account expiration time(integer) must be compiled with +HAVE_STRUCT_PASSWD_PW_EXPIRE+
     */

    /* Define-const: Group
     *
     * Group is a Struct that is only available when compiled with +HAVE_GETGRENT+.
     *
     * The struct contains the following members:
     *
     * name::
     *	    contains the name of the group as a String.
     * passwd::
     *	    contains the encrypted password as a String. An 'x' is
     *	    returned if password access to the group is not available; an empty
     *	    string is returned if no password is needed to obtain membership of
     *	    the group.
     *
     *	    Must be compiled with +HAVE_STRUCT_GROUP_GR_PASSWD+.
     * gid::
     *	    contains the group's numeric ID as an integer.
     * mem::
     *	    is an Array of Strings containing the short login names of the
     *	    members of the group.
     */

