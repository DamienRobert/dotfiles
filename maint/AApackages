vim: foldmethod=marker

$ aur.rb install --devel -uv 
~/script/rust_utils_update
$ aur.rb db clean -f

# packages {{{1
# ========

Summary:
  ./packages.rb [-t user, syst]
     [show] list list-all pristine get-all get rm rm-extra rm-unused fix_unused top_pkgs all_pkgs pkg_search
     show_infos update check_update update_or_check clean bootstrap install uninstall change_mode clean_cache search show_top show_all show_graph clean_cache
  [Note: type is automatically determined if not specified]
  -> install: ./packages.rb --shell=exec get
  -> update: ./packages.rb --shell=exec update_or_check
  -> clean: ./packages.rb --shell=exec clean

=> maintenance:
./packages.rb --shell=exec fix_unused
./packages.rb --shell=exec rm-unused
./packages.rb --shell=exec clean

~maint/{user,syst}/packages.rb can handle the actions '[show] list...'
~rubylib/packages/handler.rb can handle the actions '[show_infos] install uninstall update check_update update_or_check clean...'
~maint/packages.rb either calls "user.rb and syst.rb" or "handler.rb" according to the action

Options:
  -t ruby_gem to specify the type of package
         syst_types=[:arch_abs,:arch_aur]
         user_types=[:ruby_gem, :python_pip2, :python_pip3, :nodejs, :perl_cpan, :git_optdist, :yarn]
  -c comp to specify the computer
  --shell=[puts]/eval/exec
  -v: => [show] also show extra_ok and missing_ok

*resolver.rb [used by user.rb and syst.rb]:
  show: state of our packages installed (use @pkgsdep)
  list: list of packages we want (@pkgs)
  list-all: - @packages (static configuration hash of packages)
            - @pkgs_mode (static configuration hash of packages mode for the computer)
            - @pkgs (packages we want, derived from @packages and @pkgs_mode)
            - @ourpkgs -> {all:, top:, unused:, groups:} (packages we have; from graphs.rb#infos)
            - @pkgsdep -> :missing_pkgs, :missing_groups, :missing, :extra, :unused, :allextra (missing=missing_pkgs+missing_groups,allextra=extra+unused)
  pristine/get-all/get/rm/rm-extra/rm-unused

*graphs.rb: show graphs of installed packages [default type is 'gem']
  infos: return {all: list_packages, top: list_top, unused: list_unused, groups: list_groups(groups)}

*handler.rb:
  install/uninstall/update/clean/bootstrap
  show-infos: prints graphs.rb#infos
  check_update: check if there is an update
  update_or_check: calls update or check_update depending on the package type
  clean: clean cache

Examples:
~maint/packages.rb -t ruby_gem get-all #install all wanted pkgs
~maint/packages.rb get #install missing pkgs
~maint/packages.rb rm #remove extra pkgs
~maint/packages.rb pristine #both of the above
~maint/packages.rb bootstrap
~rubydr/packages/handler -t arch_abs change_mode go
~rubydr/packages/handlers.rb -t arch_abs change_mode go => ~rubydr/packages/handlers/arch_abs.rb change_mode go

In ruby:
require 'dr/packages'
pkgs=DR::Packages::Syst.new(DR::Computer.new)
pkgs.pkgs #{:arch_abs=>{:archive=> {atool,cpio,...}}
pkgs.pkgs_list #@pkgs_list packages we want installed (flattened version of @pkgs); {:arch_abs => {atool, cpio,...}}
pkgs.pkgs_list.values.inject(&:|) #union of the packages
pkgs.get_pkgs #populate @ourpkgs using the result of graphs.rb#infos
pkgs.ourpkgs #@ourpkgs, packages installed
pkgs.all_installed_pkgs #the all: field from ourpkgs
pkgs.get_deps #(also call get_pkgs); populate @pksdep
pkgs.pkgsdep #@pkgsdeps

require 'dr/packages'
graph_handler=DR::Packages::PkgGraph.new(:ruby_gem)
graph=graph_handler.graph
graph["activesupport"].children
graph["activesupport"].parents
graph["activesupport"].ancestors
graph["activesupport"].descendants

# pacman {{{1
# ======

pacman -Qdt
pacman_feed -Qi pacman -Qqdt

eval $(./packages.rb rm-unused)
eval $(./packages.rb rm-extra)
eval $(./packages.rb rm) #both of the above
eval $(./packages.rb get) #install missing pkgs
eval $(./packages.rb pristine) #both of the above

# rubygems {{{1
# ========

# Install
gem install pkgs

# Update
gem update

gem list: list gems
gem stale: list gems along with access times
gem outdated: display all gems that need updates
gem clean: remove old gems
gem uninstall [--force --all]: uninstall gems
gem pristine --all: reinstall (and rebuild extensions) all installed gems
gem pristine --all --only-executables: rebuild only gems that have executables

Fuzzy install: gem install rails -v "~>4.0.0" #latest 4.0.x version
rails _4.0.0_ ... #select explicit version

#regenerate the docs:
- gem rdoc --all --rdoc
- yard gems
-> yard server -g to launch local yard server

#my scripts: 
- rubygems/gem-pristine
- rubygems/gem_update_shebang.rb

# Notes:
If 'readline' is not found (like if libreadline-dev is not installed prior to using rbenv to compile ruby), then install 'rb-readline', cf https://github.com/deivid-rodriguez/byebug/issues/118

# Gemfile (gems installed into ~/var/spool/bundle)
bundle install/update/clean
To use: bundle_activate (from .zsh/functions)

#ruby upgrade
~/script/rubygems/gems_pristine --bin

# python (pip) {{{1
# ===========

#Bootstrap:
curl -L https://bootstrap.pypa.io/get-pip.py | python2 - --user
curl -L https://bootstrap.pypa.io/get-pip.py | python3 - --user
#Update: pip install --user pip -U

#install:
pip install --user #or pip2, pip3 for python2, python3
Ex: pip install --user ~/opt/src/mcomix-1.00.tar.bz2 

#update:
pip install --user foo bar -U

    https://stackoverflow.com/questions/4536103/how-can-i-upgrade-specific-packages-using-pip-and-a-requirements-file
    Note: if the package you are upgrading has any requirements this command will additionally upgrade all the requirements to the latest versions available. In recent versions of pip, you can prevent this behavior by specifying --upgrade-strategy only-if-needed. With that flag, dependencies will not be upgraded unless the installed versions of the dependent packages no longer satisfy the requirements of the upgraded package.

[Note: if 'foo' is already installed, `pip install foo` will not install the latest version, but -U will do]

- pip uninstall
- pip list #list global /usr packages too
  pip list --user

#dependencies:
pip show foo

# python paths
PYTHONUSERBASE=/home/dams/opt/pkgmgr/pip
$ python -m site
  sys.path = [
      '/home/dams',
      '/usr/lib/python37.zip',
      '/usr/lib/python3.7',
      '/usr/lib/python3.7/lib-dynload',
      '/home/dams/opt/pkgmgr/pip/lib/python3.7/site-packages',
      '/usr/lib/python3.7/site-packages',
  ]
  USER_BASE: '/home/dams/opt/pkgmgr/pip' (exists)
  USER_SITE: '/home/dams/opt/pkgmgr/pip/lib/python3.7/site-packages' (exists)
  ENABLE_USER_SITE: True


https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH
  PYTHONPATH="/www/python:/opt/ploum" = default search path for module files.

https://docs.python.org/3/using/cmdline.html#envvar-PYTHONUSERBASE
  PYTHONUSERBASE: Defines the user base directory, which is used to compute the path of the user site-packages and Distutils installation paths for python setup.py install --user.
  From https://www.python.org/dev/peps/pep-0370/ PEP 370 -- Per user site-packages directory
  => set up site.USER_BASE from which site.USER_SITE is derived
  site.USER_BASE: ~/.local 
  site.USER_SITE: ~/.local/lib/pythonX.Y/site-packages

=> https://docs.python.org/3/install/index.html#inst-alt-install-user

$ python setup.py install --user
  modules userbase/lib/pythonX.Y/site-packages
  scripts userbase/bin
  data userbase
  C headers userbase/include/pythonX.Yabiflags/distname

$ python setup.py install --home=<dir> #~ expand to $HOME
  modules home/lib/python
  scripts home/bin
  data home
  C headers home/include/python/distname

$ /usr/bin/python setup.py install --prefix=/usr/local
[--user is like --prefix=$PYTHONUSERBASE
setup.py without option is like --prefix=sys.prefix]
  Python modules prefix/lib/pythonX.Y/site-packages
  extension modules exec-prefix/lib/pythonX.Y/site-packages
  scripts prefix/bin
  data prefix
  C headers prefix/include/pythonX.Yabiflags/distname

# venv
* https://pymotw.com/3/venv/

Replace the older virtualenv
The venv module provides support for creating lightweight “virtual environments” with their own site directories, optionally isolated from system site directories. Each virtual environment has its own Python binary (which matches the version of the binary that was used to create this environment) and can have its own independent set of installed Python packages in its site directories.

$ python3 -m venv /tmp/demoenv
$ /tmp/demoenv/bin/pip install Sphinx==1.3.6

Running this command creates the target directory (creating any parent
directories that don’t exist already) and places a pyvenv.cfg file in it
with a home key pointing to the Python installation from which the command
was run (a common name for the target directory is .venv). It also creates
a bin subdirectory containing a copy/symlink of the Python binary/binaries
(as appropriate for the platform or arguments used at environment creation
time). It also creates an (initially empty) lib/pythonX.Y/site-packages
subdirectory

# poetry
https://poetry.eustace.io/
Like bundler for python, a modern version of pipenv
(pipenv: https://pypi.org/project/pipenv/
= pip + virtualenv + Pipfile)

# perl (cpan) {{{1
# ===========

#Boostrap:
curl -L http://cpanmin.us | perl - App::cpanminus

#install/update a module: cpanm Module
cpanm module

- cpanm --self-upgrade #shortcut for cpanm App:cpanminus
- cpanm --uninstall

List of installed perl modules: https://stackoverflow.com/questions/115425/how-do-i-get-a-list-of-installed-cpan-modules
cf perldoc -q installed
=> cpan -l # all perl modules (including system ones)
=> using ExtUtils:
cat <<'EOS' | perl
  #!/usr/bin/perl -w
  use ExtUtils::Installed;
  my $inst = ExtUtils::Installed->new();
  my @modules = $inst->modules();
  foreach $module (@modules){
    print $module . "\n";
  }
EOS

# nodejs (npm) {{{1
# ===========

#sudo pacman -S nodejs yarn
npm install -g packages #add is an alias to npm install
npm update -g/npm update -g packages
npm outdated -g
npm update -g
npm uninstall -g
npm install npm@latest -g #upgrade npm
npm cache verify #gc the cache

npm cache ls / npm cache clean
npm view coffee #info on the coffee package
npm view coffee dependencies #get the dependencies
npm ls -g
npm dedupe #flatten the tree

yarn (like bundler for nodejs):
yarn install, yarn add pkg, yarn upgrade #yarn install: install all packages in package.json
yarn updgrade --latest #upgrade beyond carret range
yarn install --flat
yarn global ...: yarn global add #by default install to ~/.config/yarn/global but symlink the binary in ~pkgmgr/npm/bin; cf yarn global bin to see the bin directory
yarn cache clean

Note: From 'package.json', `yarn install` => 'yarn.lock', while `npm install` => 'package-lock.json'

# git {{{1
# ===

gitfolders -l mine list #gitstatus is the action by default
gitfolders -l all
#lists: mine, perso, pro, latex, magma, var, local
#prodist, opt, usr, usrdist, dist; all
#durin, mathrice, github, prosvn, imb_local

gitfolders -l opt update -a #update [called by package_git_optdist]
gitfolders -l prodist update -a
gitfolders -l usrdist update -a

gitfolders --mirror durin #mirror all repos with durin as upstream to durin
gitfolders --mirror #by default mirror to mathrice and durin

gitfolders -l all action 'git gc --aggressive'
vcs action 'git gc --aggressive' ~/mine ~/pro/Work ~/perso ~/ViePratique

git_optdist.rb: infos (list_packages), show_repos, 
                install, uninstall, update 
                [wrapper used by handler.rb to install/remove git folders]
Ex: git_optdist.rb --optdir=/tmp install systemd
    rubylib/packages/git_optdist.rb show_repos git systemd

# Haskell {{{1
# #######

* cabal
-> pacman -S cabal-install

Ex:
$ cabal update
$ cabal install git-annex --bindir=$HOME/bin

stack #different cli tool but use cabal's libraries
https://docs.haskellstack.org/en/stable/README/
https://www.fpcomplete.com/blog/2015/06/why-is-stack-not-cabal

curl -sSL https://get.haskellstack.org/ | sh
#on arch the 'stack' package is available

* stack
https://docs.haskellstack.org/en/stable/README/
= bundler for haskell (while cabal-install is rubygem for haskell)

# Ocaml {{{1
# #####

* Installation in ~/opt/local/bin:
$ sh <(curl -sL https://raw.githubusercontent.com/ocaml/opam/master/shell/install.sh)
$ opam init --disable-sandboxing #when bwrap is not installed
$ opam env
OPAM_SWITCH_PREFIX='/home/imb/damienrobert/.opam/default'
CAML_LD_LIBRARY_PATH='/home/imb/damienrobert/.opam/default/lib/stublibs:/home/imb/damienrobert/opt/local/packages/ocaml-4.08.0/lib/ocaml/stublibs:/home/imb/damienrobert/opt/local/packages/ocaml-4.08.0/lib/ocaml'
OCAML_TOPLEVEL_PATH='/home/imb/damienrobert/.opam/default/lib/toplevel'
MANPATH='...:/home/imb/damienrobert/.opam/default/man'; export MANPATH;
PATH='/home/imb/damienrobert/.opam/default/bin:...'

* Opam root: https://opam.ocaml.org/doc/Manual.html
OPAMROOT=...
opam --root=...

opam #available on aur
# https://opam.ocaml.org/doc/1.1/Basic_Usage.html
opam list -a            # List all available packages
opam search QUERY       # List packages with QUERY in their name or description
opam info PACKAGE       # Display information about PACKAGE
opam update             # Update the packages database
opam install PACKAGE    # Download, build and install the latest version of PACKAGE
opam upgrade            # Re-install packages that were updated since last upgrade

# Rust {{{1
# ####

$CARGO_HOME
cargo search foo
cargo install foo #install in ${CARGO_HOME-~/.cargo} (building: cargo build)
cargo install --list
cargo uninstall foo

Update: cargo install-update -a #run `cargo install ploumplam` to recreate registry
                                #or 'foobar' which is an empty package

rustup {{{2
------

https://github.com/rust-lang/rustup.rs

$ curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --no-modify-path --default-toolchain nightly
=> Install:
cargo*         cargo-fmt*   clippy-driver*  rust-gdb*   rustc*    rustfmt*
cargo-clippy*  cargo-miri*  rls*            rust-lldb*  rustdoc*  rustup*

[rls: rust language server; clippy: rust linter, miri: experimental interpreter for Rust's mid-level intermediate representation (MIR).
Note: cargo-clippy, cargo-fmt, cargo-miri, clippy-driver, rls, rustfmt are just stub; to install them:
  error: 'rustfmt' is not installed for the toolchain 'stable-x86_64-unknown-linux-gnu'
  To install, run `rustup component add rustfmt --toolchain stable-x86_64-unknown-linux-gnu`
]

$RUSTUP_HOME (default: ~/.rustup or %USERPROFILE%/.rustup) Sets the root rustup folder, used for storing installed toolchains and configuration options.
$RUSTUP_TOOLCHAIN (default: none) If set, will override the toolchain used for all rust tool invocations. A toolchain with this name should be installed, or invocations will fail.

$ rustup update
Only check for self [=rustup] update:
$ rustup self update

* Roolchains: rustup toolchain list/install/uninstall/link
$ rustup toolchain install nightly [available: stable, beta, nightly]
$ rustup run nightly rustc --version
Shortcut for cargo:
$ cargo +nightly test
$ rustup default nightly
Add the system toolchain:
$ rustup toolchain link system /usr
$ rustup show #show installed toolchains

Components:
$ rust component list
  [default: cargo, rust-docs, rust-std, rustc]
$ rust component add

Extra cargo commands
--------------------

- https://github.com/nabijaczleweli/cargo-update
  cargo install-update -a - check for newer versions and update all installed packages.
  cargo install-update crate1 crate2 ... - check for newer versions and update selected packages, will not install new packages.
- https://github.com/matthiaskrgr/cargo-cache
  manage cargo cache (${CARGO_HOME}, ~/.cargo/), print sizes of dirs and remove dirs selectively
- https://github.com/sfackler/cargo-tree
  cargo tree is a Cargo subcommand that visualizes a crate's dependency graph in a tree-like format.

Registry
--------

registry/ => cache/  index/  src/
See https://docs.rs/cargo/0.12.0/cargo/sources/registry/index.html
  # A folder under which all registry metadata is hosted (similar to $HOME/.cargo/git)
  $HOME/.cargo/registry/
    # For each registry that cargo knows about (keyed by hostname + hash)
    # there is a folder which is the checked out version of the index for
    # the registry in this location. Note that this is done so cargo can
    # support multiple registries simultaneously
    # Note: crates.io is github.com-1ecc6299db9ec823 = https://github.com/rust-lang/crates.io-index => git log remotes/origin/master
    # Note: the crates.io index was squashed, cf https://internals.rust-lang.org/t/cargos-crate-index-upcoming-squash-into-one-commit/8440
    # => get info on crate 'punycode': git show origin/master:pu/ny/punycode
    index/
        registry1-<hash>/
        registry2-<hash>/
    # This folder is a cache for all downloaded tarballs from a registry.
    # Once downloaded and verified, a tarball never changes.
    cache/
        registry1-<hash>/<pkg>-<version>.crate
    # Location in which all tarballs are unpacked. Each tarball is known to
    # be frozen after downloading, so transitively this folder is also
    # frozen once its unpacked (it's never unpacked again)
    src/
        registry1-<hash>/<pkg>-<version>/...

API:
- https://crates.io/api/v1/crates => list
  Query Parameters:
    q: The search query string.
    per_page: Number of results, default 10, max 100.
  => max_version"0.8.5"
- https://crates.io/api/v1/crates/procs/downloads #downloads/day of 'procs'
- https://crates.io/api/v1/crates/procs/versions #all 'procs' versions
  => links
      dependencies"/api/v1/crates/procs/0.8.5/dependencies"
      version_downloads"/api/v1/crates/procs/0.8.5/downloads"
      authors"/api/v1/crates/procs/0.8.5/authors"

# Go {{{1
# ####

go get pkg #install in $GOPATH
go list all # list all packages (including system ones)
go clean -i pkg/... # This removes the archive files and executable binaries which reside under $GOPATH/pkg and $GOPATH/bin, but leave the src code in $GOPATH/src

Update: go get -u all

See `go help packages`, four builtin: main/all/std/cmd; and '...' is a wildcard, so pkg/... match packages in pkg/ and its subdirectories

https://golang.org/cmd/go/#hdr-Download_and_install_packages_and_dependencies
- go get: Get downloads the packages named by the import paths, along with their dependencies. It then installs the named packages, like 'go install'. 
  The -d flag instructs get to stop after downloading the packages; that is, it instructs get not to install the packages. 
- go build: Compile packages and dependencies 
- go install: Compile and install packages and dependencies
  The -i flag installs the dependencies of the named packages as well. 

# Universal package manager {{{1

- nix/guix
- https://github.com/replit/upm
- https://docs.conda.io/en/latest/
