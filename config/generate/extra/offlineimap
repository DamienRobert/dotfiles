#!/usr/bin/env ruby
#vim: fdm=syntax
require_relative '.helper.rb'

def accountname(name)
	repo= name=~/gmail/ ? name+".gmail" : name
	repo="ploum.plam.gmail" if name=='gmailpp'
	repo="damien.olivier.robert.gmail" if name=='gmaildor'
	return repo
end

def account(name)
	repo=accountname(name)
	repodir=repo
	autorefresh= name =~ /gmail/ ? 30 : 10
	local=""
	remote=""
	case name
	when "phare"
		local=<<EOS
nametrans = lambda foldername: re.sub ('Inbox', 'INBOX', foldername)
EOS
		remote=<<EOS
type = IMAP
cert_fingerprint = a07ec12fec1e32f503c3bb2d34308bffb86e9cd1
subscribedonly = no
idlefolders = ['INBOX']
folderfilter = lambda foldername: foldername in ['INBOX', 'ML', 'postponed-msgs', 'Sent']
nametrans = lambda foldername: re.sub ('INBOX', 'Inbox', foldername)
EOS
	when "inria"
		local=<<EOS
localfolders = ~/Mail/inria/imap/
EOS
		remote=<<EOS
type = IMAP
cert_fingerprint = 1fef48f9d064efb06419162b1f583badae75ed2c
folderfilter = lambda foldername: foldername not in ['Trash', 'Contacts', 'Emailed Contacts', "Incoming", "ML/imb", "ML/inria"]
EOS
	when /gmail/
		repodir=repo.sub(".gmail","@gmail")
		local=<<EOS
nametrans = lambda foldername: re.sub ('^Gmail', '[Gmail]',
                               re.sub ('Inbox', 'INBOX',
                               re.sub ('_', ' ', foldername)))
EOS
		remote=<<EOS
type = Gmail
sslcacertfile = /etc/ssl/certs/ca-certificates.crt
idlefolders = ['INBOX']
nametrans = lambda foldername: re.sub ('^\\[Gmail\\]', 'Gmail',
                               re.sub ('INBOX', 'Inbox',
                               re.sub (' ', '_', foldername)))
folderfilter = lambda foldername: foldername not in ['[Gmail]/All Mail','[Gmail]/Important', '[Gmail]/Spam', '[Gmail]/Starred', '[Gmail]/Trash']
EOS
	end

	output= <<EOS
[Account #{repo}]
localrepository = Local-#{repo}
remoterepository = Remote-#{repo}
status_backend = sqlite
autorefresh = #{autorefresh}
quick = 5

[Repository Local-#{repo}]
type = Maildir
localfolders = ~/Mail/#{repodir}/
sep = /
#{local}

[Repository Remote-#{repo}]
ssl = yes
remotehosteval = get_server_fromdict("#{name}")
remoteusereval = get_user_fromdict("#{name}")
remotepasseval = get_password_fromdict("#{name}")
#{remote}
EOS
	return output
end

def main(comp)
	accounts=["phare","inria","gmailpp","gmaildor"]
	output= <<EOS
# vi: set ft=python
[general]
maxsyncaccounts = #{accounts.length}
accounts = #{accounts.map {|a| accountname(a)}.join(',')}
pythonfile = ~/mine/config/files/offlineimap.py
socktimeout = 60
ui = BlinkenLights
metadata = ~/.offlineimap
socktimeout = 90

[mbnames]
enabled = yes
filename = ~/Mail/.muttrc.mailboxes
header = "mailboxes "
peritem = "+%(accountname)s/%(foldername)s"
sep = " "
footer = "\\n"
EOS
	output << accounts.map { |a| account(a) }.join("\n")
	return "#Generated @#{`date --iso-8601=seconds`}\n"+output
end

$helperfile=".offlineimaprc"
include DR::Helper
run(ARGV)
