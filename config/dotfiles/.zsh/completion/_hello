#compdef hello hello2 test_comp1 test_comp2 test_state

case $service in

  hello)
_arguments "1: :(World)"\
    "2:Countries:(France Germany Italy)"\
    "*:Cities:((Paris\:France Berlin:\Germany Rome:\Italy))"
;;

  hello2)

hello2() { 
  local curcontext="$curcontext" state line
  typeset -A opt_args

  _arguments -C \
      '1: :->country'\
      '*: :->city'

  _message "Word: $words, current: $CURRENT, line: $line"
  case $state in
  country)
      _arguments '1:Countries:(France Germany Italy)'
      #name1=(France:Vin, Germany:Beer, Italy:pizza)
      #_describe -t countries "Select country"  name1
      ;;
  *)
      case $words[2] in
      France)
          compadd Paris Lyon Marseille "$@" 
      ;;
      Germany)
          compadd "$@" Berlin Munich Dresden
      ;;
      Italy)
          compadd "$@" Rome Napoli Palermo
      ;;
      *)
          _files 
      esac 
  esac 
}

    hello2 "$@"
;;

  test_comp1)
    _arguments '*:: :_command'
    #_command "$@" #this also work
    #test_comp1 acts as 'sudo' would do
  ;;

  test_comp2)
    _arguments '*:: :_normal'
    #_normal "$@" #this give infinite recursion error
    #test_comp2 acts as if you could give anything (like a precommand)
  ;;

  test_state )
    local curcontext=$curcontext state line ret=1
    _arguments -C \
      '-v[verbose]: :->verbose' \
      '*: :->ploum' && ret=0
      case $state in
        ploum) 
          _message "context: $curcontext, state: $state, current: $CURRENT, words: $words, line: $line"
    #line: contain the state that is being completed:
    #test_state -v ploum plam plim => words=-v ploum plam plim, CURRENT=5, line=plam plim
    #dans la forme *:: :->ploum, words et CURRENT sont adjustés pour être
    #comme avec LINE
    compadd $(_ssh "$@") && ret=0
          ;;
        verbose) _message "verbose!" ;;
      esac
      return ret
    ;;
esac
