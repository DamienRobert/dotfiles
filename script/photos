#!/usr/bin/zsh

msg() {
	[[ -n $TOTRANSFERT ]] && echo -n "=> "; echo ${TOTRANSFERT:t}
	[[ -n $CURRENT || -n $LAST ]] && echo "# Photos: '$CURRENT' -> '$LAST'"
	[[ -n $CURVID || -n $LASTVID ]] && echo "# Videos: '$CURVID' -> '$LASTVID'"
	[[ -n $CURDATE ]] && echo "Last backup: $CURDATE"
	[[ -n $TOTRANSFERT ]] && echo "# Total: $#TOTRANSFERT"
	echo "# Dir: $PHOTODIR (press a key to continue)"
	read a
}

updatecur() {
	echo "#$PHOTODIR ($(date --iso-8601=seconds))" >> $CURFILE
	[[ -n $LAST ]] && echo "CURRENT=$LAST" >> $CURFILE
	[[ -n $LASTVID ]] && echo "CURVID=$LASTVID" >> $CURFILE
	[[ -n $CURDATE ]] && echo "CURDATE=$(date +%s)" >> $CURFILE #seconds since Epoch
}

transfert() {
	rsync -vazzP "$@"
}

do_transfert() {
	msg
	[[ -n $TOTRANSFERT ]] && transfert $TOTRANSFERT $PHOTODIR
	updatecur
}

alphabetic_mode() { #alphabetic or state
	# echo "** alphabetic mode"
	PHOTOS=($CAMERAPHOTOS/${(@)^~PHOTOSGLOB})
	[[ -n $PHOTOS ]] && LAST=${PHOTOS[-1]:t:r} #for updatecur
	if [[ -n $CAMERAVIDEOS ]]; then
		VIDEOS=($CAMERAVIDEOS/${(@)^~VIDEOSGLOB})
		[[ -n $VIDEOS ]] && LASTVID=${VIDEOS[-1]:t:r} #for updatecur
	fi
	# echo "all photos: $PHOTOS"
	# echo "all videos: $VIDEOS"
	TOTRANSFERT=()
	for photo in $PHOTOS; do
		if [[ -n $CURDATE ]]; then #use stat
			filedate=$(stat --printf=%Y $photo) #time of last modif, seconds since Epoch
			[[ $filedate > $CURDATE ]] && TOTRANSFERT+=$photo
		else
			[[ ${photo:t:r} > $CURRENT ]] && TOTRANSFERT+=$photo
		fi
	done
	for video in $VIDEOS; do
		if [[ -n $CURDATE ]]; then
			filedate=$(stat --printf=%Y $video)
			[[ $filedate > $CURDATE ]] && TOTRANSFERT+=$video
		else
			[[ ${video:t:r} > $CURVID ]] && TOTRANSFERT+=$video
		fi
	done
	do_transfert
}

missing() {
	[[ -z $LAST ]] && LAST=$CURRENT
	[[ -z $LASTVID ]] && LASTVID=$CURVID
}

numeric_mode() { #obsolete
	NEXT=$(($CURRENT+1))
	NEXTVID=$(printf %05d $(($CURVID+1)))
	LAST=($CAMERAPHOTOS/*_PANA/*); [[ -n $LAST ]] && LAST=${LAST[-1]:t:r}
	LASTVID=$($CAMERAVIDEOS/STREAM/*); [[ -n $LASTVID ]] && LASTVID=${LASTVID[-1]:t:r}
	missing
	TOTRANSFERT=($CAMERAPHOTOS/*_PANA/P{$NEXT..$LAST}.{JPG,RW2}(N) $CAMERAVIDEOS/STREAM/{$NEXTVID..$LASTVID}.MTS(N) $CAMERAVIDEOS/CLIPINF/{$NEXTVID..$LASTVID}.CPI(N))
	do_transfert
}

find_curfile() {
	local dir=$1
	if [[ -f $dir/00current ]]; then
		CURFILE="$dir/00current"
	else
		if [[ $dir == "/" ]]; then
			"Warning: 00current not found"
			return 1
		else
			dir=${dir:h}
			find_curfile $dir
		fi
	fi
}

while true; do
	case $1 in
		-- ) break ;;
		-c|--camera ) shift; CAMERADIR=$1; shift ;;
		*) break;;
	esac
done

PHOTODIR=$1
[[ -z $PHOTODIR ]] && PHOTODIR=$PWD
[[ -d $PHOTODIR ]] || mkdir -p $PHOTODIR || exit 1
[[ -z $CURFILE ]] && find_curfile $(realpath -- $PHOTODIR)
[[ -n $CURFILE ]] && . $CURFILE

. ~/script/lib/mount_dir
MOUNTMODE="udisk"
find_mount && do_mount
[[ -z $CAMERADIR ]] && CAMERADIR=$MOUNTTARGET
[[ -z $CAMERAPHOTOS ]] && ( [[ -d $CAMERADIR ]] || exit 1 )
#Set it up explicitely to override $CURFILE variables
[[ -z $CAMERAPHOTOS ]] && CAMERAPHOTOS=$CAMERADIR/$CAMERAPHOTOSNAME
[[ -z $CAMERAVIDEOS && -n $CAMERAVIDEOSNAME ]] && CAMERAVIDEOS=$CAMERADIR/$CAMERAVIDEOSNAME
[[ -z $PHOTOSGLOB ]] && PHOTOSGLOB="**/*(.N)"
[[ -z $VIDEOSGLOB ]] && VIDEOSGLOB="**/*(.N)"
echo "Dir=$CAMERADIR, Photos=$CAMERAPHOTOS, Videos=$CAMERAVIDEOS"

case $mode in
	'stat') alphabetic_mode ;;
	'alphabetic') alphabetic_mode ;;
	'numeric') numeric_mode ;;
	* ) alphabetic_mode ;;
esac

# For phones:
# - Copy using pcmanfm the DCIM folder to /tmp
# - Use ssh helper:
#   md /tmp/DCIM/Camera; cd /tmp/DCIM/Camera
#   ssh samsung ls /storage/extSdCard/DCIM/Camera/
#   transfert samsung:/storage/extSdCard/DCIM/Camera/20150{7,8}\* .
#   CAMERAPHOTOS="/tmp/DCIM/Camera"
# - Use gvfs:
#   gvfs-mount -li
#   gvfs-mount 'mtp://[usb:001,030]/'
#   CAMERAPHOTOS="$HOME/.gvfs/mtp:host=%5Busb%3A001%2C056%5D/Card/DCIM/Camera"
# - udisk:
#   udiskctl status
# - jmtpfs / simple-mtpfs:
#   simple-mtpfs ~/mnt/usb
#   CAMERAPHOTOS=~/mnt/usb/Card/DCIM ~/script/photos

[[ -n $DID_MOUNT ]] && do_umount
