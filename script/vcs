#!/bin/zsh

autoload -Uz colors && colors
QUIET=

mklist() {
	list=($@)
	[[ $# -eq 0 ]] && list=( . )
	namelist=()
	for folder in $list; do
		foldername=${folder/$HOME/'~'}
		namelist+=$foldername
	done
}

msg() {
	msg="${fg[yellow]}=====${fg[yellow]} $1"
	[[ -n $folder && $folder != "." ]] && msg+=" for $foldername"
	msg+=" =====${reset_color}";
	[[ -z $QUIET ]] && echo -e $msg
}

pushgitrepo() {
	local orig; orig=$1
	msg "Pushing to $orig"
	git push --prune --all $orig
	git push --prune --tags $orig
}

doaction() {
	for ((i=1; i <= $#list; i++)) do
		folder=$list[i]
		foldername=$namelist[i]
		case $action in
			fetch )
				if [[ -d $folder && -d $folder/.git ]]; then
					msg "fetch"
					( cd $folder
					git fetch --all -p
					)
				fi
				;;
			update )
				if [[ -d $folder ]]; then
					msg "update $AUTO"
					( cd $folder;
					if git rev-parse 2>/dev/null; then
						if [[ -n $VCS_RAW ]]; then
							git pull $OPTS
						else
							git my update $AUTO $OPTS
						fi
					fi
					if [[ -d .hg ]]; then hg pull -u; fi
					if [[ -d .svn ]]; then svn update; fi
					)
				fi
				;;
			push )
				if [[ -d $folder ]]; then
					msg "push"
					( cd $folder;
					if git rev-parse 2>/dev/null; then
						git push
					fi
					[[ -d .hg ]] && hg push
					[[ -d .svn ]] && svn commit
					)
				fi
				;;
			pushall )
				if [[ -d $folder ]]; then
					( cd $folder;
					if git rev-parse 2>/dev/null; then
						pushgitrepo $orig
					fi
					)
				fi
				;;
			type )
				if [[ -d "$folder/.git" ]]; then echo "$foldername: git"; fi
				if [[ -d "$folder/.hg"  ]]; then echo "$foldername: hg" ; fi
				if [[ -d "$folder/.svn" ]]; then echo "$foldername: svn"; fi
				if [[ -d "$folder/.bzr" ]]; then echo "$foldername: bzr"; fi
				if [[ -d "$folder/.svk" ]]; then echo "$foldername: bzk"; fi
				;;
			list )
				echo $foldername
				;;
			action )
				if [[ -d $folder ]]; then
				  msg "action: $command"
					(
					cd $folder
					eval $command
					)
				fi
				;;
			last_tag )
				if [[ -d $folder ]]; then
					msg "last tag"
					( cd $folder;
					if git rev-parse 2>/dev/null; then
						if [[ -n $LAST_TAG ]]; then
							eval $LAST_TAG
						else
							git tag | sort --version-sort | tail -n1
						fi
					fi
					)
				fi
				;;
		esac
	done
}

# these opts are for 'vcs status' because of the shortcut 'vcs -> vcs status'
opts=()
while [[ $# -gt 0 ]]; do
	case $1 in
		-- ) shift; break ;;
		-*) opts+=$1; shift ;;
		*) break;;
	esac
done
if [[ $# -gt 0 ]]; then
	action=$1; shift
else
	action="status"
fi

case $action in
	status )
		#this case is special because I want to call gitstatus.rb only once
		#since ruby can be a bit slow
		while true; do
			case $1 in
				-- ) shift; break ;;
				-*) opts+=$1; shift ;;
				*) break;;
			esac
		done
		mklist "$@"
		gitstatus.rb $opts $list
		exit 0
		;;
	update )
		AUTO=
		OPTS=()
		while true; do
			case $1 in
				-- ) shift; break ;;
				-a|--auto) shift; AUTO="--auto" ;;
				-*) OPTS+=$1; shift ;;
				*) break;;
			esac
		done
		;;
	pushall )
		orig="origin"
		while true; do
			case $1 in
				-- ) shift; break ;;
				-o|--orig) shift; orig=$1; shift ;;
				*) break;;
			esac
		done
		;;
	gc )
		action=action
		command="git gc --aggressive"
		;;
	action )
		command=$1
		shift
		;;
	last_tag )
		while true; do
			case $1 in
				-- ) shift; break ;;
				-q|--quiet) shift; QUIET=t ;;
				*) break;;
			esac
		done
		;;
	list | type | fetch )
		#no preparation to do
		;;
	clone | clone_or_update )
		OPTS=()
		local git_opt_dist
		while true; do
			case $1 in
				-- ) shift; break ;;
				-c|--checkout) shift; checkout=$1; shift ;;
				-d|--dist) shift; git_optdist=t ;;
				-*) OPTS+=$1; shift ;;
				*) break;;
			esac
		done
			url=$1
			[[ -n $git_optdist ]] && url=$(~/mine/ruby/lib/dr/packages/handlers/git_optdist.rb --repo $url)
			dir=$2
			[[ -z $dir ]] && dir="./"
			[[ $dir[-1] == "/" ]] && dir+=${$(basename $url)%.git}
			mkdir -p $(dirname $dir)
			if [[ -d $dir ]]; then
				# msg "updating $dir" (vcs update will log)
				if [[ $action == clone_or_update ]]; then
					vcs update $OPTS $dir
				else
				  msg "$dir already exists"
				fi
			else
				msg "cloning $url to $dir"
				git clone $url $dir
			fi
			if [[ -n $checkout ]]; then
				[[ $checkout == "LAST" ]] && checkout=$(vcs last_tag -q $dir)
				git -C $dir checkout $checkout
			fi
		;;
	help )
		echo "$0 list/type/update/fetch/status/action/last_tag dirs"
		echo "$0 clone_or_update [-c/--checkout tag/LAST] url dir"
		# Exemples: vcs action 'git remote show origin | grep Fetch' *
		exit 1
		;;
esac

mklist "$@"
doaction
