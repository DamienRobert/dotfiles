#!/bin/zsh

autoload -Uz colors && colors

mklist() {
	list=($@)
	[[ $# -eq 0 ]] && list=( . )
	namelist=()
	for folder in $list; do
		foldername=${folder/$HOME/'~'}
		namelist+=$foldername
	done
}

msg() {
	msg="${fg[yellow]}=====${fg[yellow]} $1"
	[[ $folder != "." ]] && msg+=" for $foldername"
	msg+=" =====${reset_color}";
	echo -e $msg
}

doaction() {
	for ((i=1; i <= $#list; i++)) do
		folder=$list[i]
		foldername=$namelist[i]
		case $action in
			fetch )
				if [[ -d $folder && -d $folder/.git ]]; then 
					msg "fetch"
					( cd $folder
					git fetch --all -p
					)
				fi
				;;
			update )
				if [[ -d $folder ]]; then 
					msg "update $AUTO"
					( cd $folder;
					if git rev-parse 2>/dev/null; then 
						if [[ -n $AUTO ]]; then
							#update svn if it exists, otherwise update master
							if [[ -d $(git rev-parse --git-dir)/svn ]]; then
								git my update svn
							else
								git my update master
							fi
						else
							#update current branch
							#(note: git my update now automatically correctly updates svn
							#branches)
							git my update
						fi
					fi
					if [[ -d .hg ]]; then hg pull -u; fi
					if [[ -d .svn ]]; then svn update; fi
					)
				fi
				;;
			list )
				if [[ -d "$folder/.git" ]]; then echo "$foldername: git"; fi
				if [[ -d "$folder/.hg"  ]]; then echo "$foldername: hg" ; fi
				if [[ -d "$folder/.svn" ]]; then echo "$foldername: svn"; fi
				if [[ -d "$folder/.bzr" ]]; then echo "$foldername: bzr"; fi
				if [[ -d "$folder/.svk" ]]; then echo "$foldername: bzk"; fi
				;;
			action )
				if [[ -d $folder ]]; then 
				  msg "action: $command"
					( 
					cd $folder
					eval $command
					)
				fi
				;;
		esac
	done
}

action=$1; shift
case $action in
	status )
		#this case is special because I want to call gitstatus.rb only once
		#since ruby can be a bit slow
		OPTS=()
		while true; do
			case $1 in
				-- ) shift; break ;;
				-*) OPTS+=$1; shift ;;
				*) break;;
			esac
		done
		mklist "$@"
		gitstatus.rb $OPTS $list
		exit 0
		;;
	update )
		AUTO=
		while true; do
			case $1 in
				-- ) shift; break ;;
				--auto) shift; AUTO="--auto" ;;
				*) break;;
			esac
		done
		;;
	action )
		command=$1
		shift
		;;
	list | fetch )
		#no preparation to do
		;;
	* )
		echo "$0 list/update/fetch/status/action dirs"
		;;
esac

mklist "$@"
doaction
