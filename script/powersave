#!/usr/bin/zsh
. $HOME/.initvars
LIBSCRIPT=$MYFILES/script/lib/

WSERVICES=(); WMODULES=()
ESERVICES=(); EMODULES=()
BTSERVICES=(); BTMODULES=()
case $MYHOSTNAME in
	Numenor) EMODULES+=(r8169) ;; #unload eth0 module (consume 600mW)
esac
. $LIBSCRIPT/find_dev.zsh
. $LIBSCRIPT/powersave.zsh

help() {
	echo "$0: More powersave than what is called automatically in /usr/bin/powersave by /etc/udev/rules.d/50-powersave.rules"
	echo "- true: deactivate wifi if not running, set brightness to 0, stop bluetooth, stop user services (internet+xsession services)
	[with -f force stop network devices]
- false: reverse of true
- start/stop bt/netdev/services: start/stop bluetooth/network device/services
- usb on|auto|suspend: set the corresponding action in /sys/bus/usb/devices/*/power/
- status [usb]: powersave status
- state: on power or not"
	exit 1
}


start_stop_mods() {
	[[ -n $services || -n $mods ]] && echo "-> [$mode] $object ($services; $mods)"
	case $mode in
		start)
			[[ -n $mods ]] && sudo modprobe $mods
			[[ -n $services ]] && sudo systemctl start $services
			;;
		stop)
			[[ -n $services ]] && sudo systemctl stop $services
			[[ -n $mods ]] && sudo modprobe -r $mods
			;;
	esac
}

rfkill_service() {
	local dev; dev=$1
	case $mode in
		start)
			echo "-> systemctl start rfkill-unblock@$dev.service"
			sudo systemctl start "rfkill-unblock@$dev.service"
			;;
		stop) 
			echo "-> systemctl start rfkill-block@$dev.service"
			sudo systemctl start "rfkill-block@$dev.service"
			;;
	esac
}

bluetooth() {
	local disconnected doit
	mode=$1; shift
	disconnected=t
	doit=t
	while true; do
		case "$1" in
			-- ) break ;;
			-f ) shift; disconnected=;;
			*) break;;
		esac
	done
	[[ -n $disconnected ]] && test_bt_connection && doit=
	if [[ -n $doit ]]; then
		services=($BTSERVICES)
		mods=($BTMODULES)
		object="bluetooth"
		echo "- [$mode] $object"
		rfkill_service bluetooth
		start_stop_mods
	fi
}

network_dev() {
	local args device_type nc_dev disconnected
	disconnected=t
	mode=$1; shift
	while true; do
		case "$1" in
			-- ) break ;;
			-d|--disconnected ) shift; disconnected=t ;;
			-f ) shift; disconnected=;;
			*) break;;
		esac
	done
	args=($@)
	if [[ -z $args ]]; then
		find_netdevs
		args=($netdevs)
	fi
	if [[ -n $disconnected ]]; then
		nc_dev=()
		for dev in $args; do
			if ! test_connection $dev; then
				nc_dev+=($dev)
			fi
		done
		args=($nc_dev)
	fi

	echo "- [$mode] network devices: $args"
	for object in $args; do
		services=;mods=;device_type=;
		case $object in
			w*) device_type="wlan" ;;
			e*) device_type="eth" ;;
		esac
		case $device_type in
			wlan)
				rfkill_service wifi
				services=($WSERVICES wpa_supplicant@$object.service)
				mods=($WMODULES)
				##done in /usr powersave
				#echo "-> $object: powersave on"
				#sudo iw dev $object set power_save on
				##switch off: sudo iwconfig $object txpower off or sudo iw dev $object set txpower limit 0
				;;
			eth)
				services=($ESERVICES)
				mods=($EMODULES)
				##done in /usr powersave
				#case $mode in
				#	start)
				#		echo "-> $object: Enable wol"
				#		sudo ethtool -s $object wol g;;
				#	stop)
				#		echo "-> $object: Disable wol"
				#		sudo ethtool -s $object wol d ;;
				#esac
				;;
		esac
		start_stop_mods
	done
}

services() {
	mode=$1; shift
	local force
	while true; do
		case "$1" in
			-- ) break ;;
			-f|--force ) shift; force=t ;;
			*) break;;
		esac
	done
	echo "- [$mode] user services"
	case $mode in
		start)
			echo "-> [$mode] network.target"
			systemctl --user start network.target
			echo "-> [$mode] xsession.target"
			[[ -n $DISPLAY ]] && systemctl --user start "xsession.target"
			;;
		stop)
			[[ -z $force ]] && is_connected
			[[ -z $connected ]] && {
				echo "-> [$mode] internet.target"
				systemctl --user stop internet.target
			}
			echo "-> [$mode] xsession.target"
			systemctl --user stop "xsession.target"
			if mpc | grep '\[playing\]' >/dev/null; then
				echo "! Not stopping mpd [playing]"
			else
				echo "-> [$mode] mpd"
				systemctl --user stop "mpd.service"
			fi
			;;
	esac
}

set_dpms_brightness() {
	local bright dpms
	while true; do
		case $1 in
			-- ) break ;;
			*dpms ) dpms=$1; shift ;;
			*) break;;
		esac
	done
	#This should already be done in the global powersave script, but
	#sometime i want to put brightness back without having to plug the
	#cord.
	bright=$1; shift
	find_backlights
	SUDO_WRITE=t
	set_brightness --auto $bright $backlights
	if [[ -n $dpms ]]; then
		xset dpms 0 0 120
		xset $dpms
	fi
}

start_stop() {
	mode=$1; shift
	arg=$1; shift
	case $arg in
		bt|bluetooth) bluetooth $mode $@ ;;
		netdev|network_dev) network_dev $mode $@ ;;
		services) services $mode $@ ;;
		*) network_dev $mode $arg $@ ;;
	esac
}
start() {
	start_stop start $@
}
stop() {
	start_stop stop $@
}


process() {
	case $1 in
		true|on )
			shift
			[[ -n $do_brightness ]] && set_dpms_brightness +dpms min
			stop network_dev $opts
			stop bluetooth
			stop services $opts
			;;
		false|off )
			shift
			[[ -n $do_brightness ]] && set_dpms_brightness -dpms max
			start network_dev
			start bluetooth
			start services
			;;

		start ) shift; start $@ ;;
		stop ) shift; stop $@ ;;
		brightness ) shift; set_dpms_brightness $@ ;;
		state) shift; get_sys_power_supply ;
			state=$?; echo "state: $state"; exit $state ;;
		status ) shift; powersave_status $@ ;;
		usb ) write_files $2 /sys/bus/usb/devices/*/power/control ;;
		syst) shift; /usr/local/lib/powersave/bin/powersave $@ ;;
		* ) help ;;
	esac
}

do_brightness=
opts=()
while true;
do
	case $1 in
		-- ) break ;;
		-h|-help|--help ) shift ; help ;;
		-b) shift ; do_brightness=t ;;
		-f) opts+=($1); shift ;;
		*) break;;
	esac
done

[[ $UID  -eq 0 ]] && { echo "Do not run as root!"; exit 1 }
if [[ $# -eq 0 ]]; then
	process "true"
else
	process $@
fi
