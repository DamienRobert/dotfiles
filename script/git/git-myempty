#!/bin/zsh
SUBDIRECTORY_OK=true
. "$(git --exec-path)/git-sh-setup" ""

#git myemptycommit trash creates a branch trash that start with an empty commit
# i can then use git merge -s ours plom plam to merge branches plom plam
# that I want to discard (but i still want a trace not in the reflog)

help() {
    echo "git-myempty [-b branch] create/merge"
    echo ""
    echo "git myempty [-b branch] create parents
    Create an empty commits with parents 'parents' ('parents' can be empty)
    If branch is specified create branch on this commit and checkout"
    echo ""
    echo "git myempty [-b branch] merge branches
    Create a trivial merge (-s ours) against branches. 
    If branches is empty use HEAD.
    If branch is specified checkout on branch and create the merge in branch."
    exit 0
}

branch=

while true;
do
  case "$1" in
    -- ) shift; break ;;
  -b|-branch ) shift; branch=$1; shift ;;
  -h|-help ) help ;;
    *) break;;
  esac
done

[ $# -eq 0 ] && help
action="$1"; shift
case "$action" in
  create )
    #The magic SHA1 4b825dc642cb6eb9a060e54bf8d69288fbee4904
    tree=$(git hash-object -t tree /dev/null)
    #GIT_AUTHOR_DATE="Thu, 01 Jan 1970 00:00:00 +0000" GIT_COMMITTER_DATE="Thu, 01 Jan 1970 00:00:00 +0000" git commit --allow-empty -m 'Initial empty commit'
    if [ $# -eq 0 ]; then 
      msg='Initial empty commit'
    else
      msg='Empty commit with parents'
    fi
    opts=()
    for parent in "$@"; do
      msg="$msg $parent"
      opts=($opts '-p' $(git rev-parse --verify $parent))
    done
    echo "echo $msg | GIT_AUTHOR_DATE="Thu, 01 Jan 1970 00:00:00 +0000" GIT_COMMITTER_DATE="Thu, 01 Jan 1970 00:00:00 +0000" git commit-tree $opts $tree"
    commit=$(echo $msg | GIT_AUTHOR_DATE="Thu, 01 Jan 1970 00:00:00 +0000" GIT_COMMITTER_DATE="Thu, 01 Jan 1970 00:00:00 +0000" git commit-tree $opts $tree)
    echo "Empty tree: $tree, Empty commit: $commit"
    [ -n "$branch" ] && git checkout -b "$branch" $commit
  ;;
  merge )
    CURRENT=$(git current-branch -a)
    [ -n "$branch" ] && git checkout "$branch"
    if [ $# -eq 0 ]; then
      echo git merge -s ours $CURRENT
      git merge -s ours $CURRENT
    else
      echo git merge -s ours "$@"
      git merge -s ours "$@"
    fi
    git checkout $CURRENT
;;
esac
