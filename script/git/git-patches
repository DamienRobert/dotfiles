#!/bin/zsh
SUBDIRECTORY_OK=true
. "$(git --exec-path)/git-sh-setup" ""
require_work_tree
cd_to_toplevel

patchdir=".patches"
cccmd=
actiondo=
actiondone=

help() {
    echo "git-mypatch format/send check/apply sent/resend/applied/reapply

    - git mypatch format [branch] [upstream] [format-patch args]
    Apply format-patch args. If args is empty, use upstream..branch.
    Here branch and upstream are found using git-topic-helper

    - git mypatch send [--cc] name
      Send patches, eventually applying git-mycc as cc-cmd if --cc is given as parameters
    
    - git mypatch check name
      Check if the patches in name apply on the workdir (usually won't be the case if there is one of them that depend on another). Also check for whitespace error
    - git mypatch apply name
      apply patches in name
    
    - git mypatch sent/resend name
    - git mypatch applied/reapply name
        Move the patches accordingly

    |--dir|: change the patchdir .patches
    |--dir-from|: change the default dirs send/apply
    |--dir-to|: change the default dirs sent/applied"
    exit 0
}

while true;
do
  case "$1" in
    -- ) shift; break ;;
  --dir ) shift; patchdir=$1; shift ;;
  --dir-from )  shift; actiondo=$1; shift ;;
  --dir-to )  shift; actiondone=$1; shift ;;
  --cc ) shift; cccmd="--cc-cmd=$HOME/var/dist/git-extra/git-related/git-related" ;;
-h|--help|-* ) help ;;
    *) break;;
  esac
done

mvaction() {
  mkdir -p "$patchdir/$2/"
  mv -i "$patchdir/$1/$3" "$patchdir/$2/"
}

getlist() {
    OLDIFS=$IFS
    IFS='
'
    list=($(find "$patchdir/$actiondo/$branch" -type f -not -name '0000*' | sort ))
    IFS=$OLDIFS
}

[[ -z $1 ]] && help
action=$1; shift

case $action in
  format|send|sent|resend)
    [[ -z $actiondo ]] && actiondo=send
    [[ -z $actiondone ]] && actiondone=sent
  ;;
  apply|applied|reapply)
    [[ -z $actiondo ]] && actiondo=apply
    [[ -z $actiondone ]] && actiondone=applied
  ;;
esac

. ~/mine/script/git/git-topic-helper
#this is a bit tricky, when using 'format' I need to find the upstream
#branch. But otherwise I need only to find the current branch, not the
#upstream one, so I add -to "" to gth_topic so that it won't look for it.
if [[ $action == format ]]; then
  gth_topic "$@"
  branch=$gth_local
  upstream=$gth_remote
else
  gth_branch "$@"
  branch=$gth_branch
fi

case $action in
  format )
    [[ -n $upstream ]] && signature="--signature=Patched on top of $(git describe --always $(git merge-base $branch $upstream)) ($(git --version))" || signature=""
    if [[ -z $gth_rest ]]; then
      if [[ -n $upstream ]]; then
        gth_rest="$upstream..$branch"
      else
        gth_rest=($branch)
      fi
    fi
    mkdir -p "$patchdir/$actiondo/$branch"
    echo git format-patch $signature -B -M -C -s --cover-letter -o "$patchdir/$actiondo/$branch" $gth_rest
    git format-patch $signature -B -M -C -s --cover-letter --numbered --thread -o "$patchdir/$actiondo/$branch" $gth_rest
    #-M detect move, -C detect copy, -B rewrite are written as a deletion + a creation
    ;;
  send )
    [[ -z $branch ]] && branch=$(git current-branch -a)
    echo git send-email $cccmd --annotate $gth_rest "$patchdir/$actionddo/$branch/"
    git send-email $cccmd --annotate $gth_rest "$patchdir/$actiondo/$branch/"  && mvaction $actiondo $actiondone $branch
    ;;

  check )
    getlist
    for patch in $list; do
      echo "*** Testing $patch (mostly usefull for whitespace errors) ***"
      git apply --check --whitespace=error-all $gth_rest $patch 2>&1 | grep --color -E '.*whitespace.*|$'
      #clever trick to color the match on whitespace: grep match all lines,
      #but most of them only on the end of line which is not colored
    done
    ;;
  apply )
    getlist
    echo "git am -3 $gth_rest $list"
    git am -3 $gth_rest $list  && mvaction $actiondone $actiondo $branch
    ;;

  sent )
    mvaction $actiondo $actiondone $branch
    ;;
  resend )
    mvaction $actiondone $actiondo $branch
    ;;
  applied )
    mvaction $actiondone $actiondo $branch
    ;;
  reapply )
    mvaction $actiondo $actiondone $branch
  ;;

  * )
    help
  ;;
esac
