#!/usr/bin/ruby -W0
#https://github.com/masukomi/git_accessories

=begin
git-status-report
=================

Generates a status report for what you (or a coworker) worked on for the past n days from 
all of the branches from a pre-configured list of repos (see below) or the current repo.

Useful for those once a week emails your boss is always asking for.

*Please note. git-status-report requires the Grit gem to function (gem install grit).*

	Usage: git status-report [-e <email>][-d <days>]
	Generates a status report for what you worked on for the past n days.
	    -a, --all                        Displays output for all contributers sorted by person
	    -b, --branches <branch name>     Limit results to work found in the specified branch(es). 
	                                         Multiple branches can be comma separated
	    -c, --current                    Generates status report for the current repo only
	    -d, --days <num days>            The number of days to generate the report for. Defaults to past 6 days (one week)
	    -e, --email <email address>      The email address of the committer to generate a report for. 
	                                         Defaults to your "git config user.email" address. 
	                                         Multiple email addresses can be comma separated.
	    -f, --files                      Display a list of files involved in the commit(s)
	    -h, --help                       Displays this message
	    -r, --reverse                    Displays output in reverse chronological order
	    -s, --simple                     Simpler output. Doesn't include the dates
	    -v, --verbose                    Verbose output includes details on each commit



If you wish to pre-configure a list of repos to build you status report from 
(and you should) you can do so by adding them to git's global config 
as shown below. You can add as many include or exclude paths as you'd like.
of *absolute* paths to your local repos (the folder containing the .git folder).
Verbose mode will let you know which branch of which repo each item came from.

If you don't specify any "includes" it will attempt to find repos in the current directory or 
directories below it.

	git config --global --add status-report.include /Users/masukomi/workspace/git_accessories
	git config --global --add status-report.include /Users/masukomi/workspace/jsonpath-perl
	git config --global --add status-report.exclude /Users/masukomi/workspace/some_repo_i_want_excluded_from_status-report

Please note that it does not currently support wildcard exclusions.

If you don't want to use the default e-mail in "git config user.email"
or you want to specify more than one, but not all, in your default status 
report you can set those in the status-report section of your git config
as well.

	git config --global --add status-report.email first-person@example.com
	git config --global --add status-report.email second-person@example.com



Configuration Options
---------------------
In addition to configuring includes and excludes you can pre-configure the number of 
days you want the status report to include in its run without having to manually 
specify it on the command line. By default it will include 6 days which is perfect 
if you run it on Fridays and want the previous week's work. But if you
run it on a Monday you'll probably want it to default to seven. 

	git config --global --replace-all status-report.days 7


Finding Repos when none are configured
--------------------------------------

git-status-report will looks in three places for repos and uses whichever one works first.

1. it will check the git global config for "include" repos.
2. it will check if the current directory is a working repo.
3. it will do a "find" to discover any working repos below the current directory.

All of these are trumped by paths excluded in the global config.

Finding repos is really rather slow. It's always a better idea to pre-configure them.

Planned Features
-----------------
Please see the wiki page on github. If you're interested in helping please fork 
this repo (preferably on Github) and request a pull when you've got something ready to add.

### Example output ###

#### Default output ####
	$ git status-report -d 10
	Status report for "masukomi@masukomi.org" (last 10 days)
	2010-07-19
		* git-status-report now notes branch it was generated from in verbose mode
		* Added break to git-status-report's current branch lookup for efficiency.
	2010-07-21
		* mistakenly had -s instead of -v for short version of --verbose
		* Updated README to include git-status-report info
	2010-07-23
		* git-status-report now generates report from all branches
		* git-status-report now supports a --reverse option
		* Updated README.mkdn to include info on --reverse


#### Simple Output ####
	$ git status-report -sd 10
	Status report for "masukomi@masukomi.org" (last 10 days)
		* git-status-report now notes branch it was generated from in verbose mode
		* Added break to git-status-report's current branch lookup for efficiency.
		* mistakenly had -s instead of -v for short version of --verbose
		* Updated README to include git-status-report info
		* git-status-report now generates report from all branches
		* git-status-report now supports a --reverse option
		* Updated README.mkdn to include info on --reverse

#### Verbose Output ####
	$ git status-report -vd7
	Status report for "masukomi@masukomi.org" (last 7 days)
	2010-07-21
		commit 1----------
			mistakenly had -s instead of -v for short version of --verbose
			[Found in branch "development" of repo at /Users/masukomi/workspace/git_accessories]
		commit 2----------
			Updated README to include git-status-report info
			
			* added markdown formatting
			* renamed file README -> README.mkd
			[Found in branch "development" of repo at /Users/masukomi/workspace/git_accessories]
	2010-07-23
		commit 1----------
			git-status-report now generates report from all branches
			
			* output has been sorted chronologically (instead of reverse cron)
				this is because it makes a more sensible default for
				something you're giving to a boss. AND because the next
				commit will be a --reverse option which gives you the
				some info in reverse chronological order.
			[Found in branch "development" of repo at /Users/masukomi/workspace/git_accessories]
		commit 2----------
			git-status-report now supports a --reverse option
			
			* produces output in reverse chronological order
			[Found in branch "development" of repo at /Users/masukomi/workspace/git_accessories]
		commit 3----------
			Updated README.mkdn to include info on --reverse
			
			* also did minor formatting changes
			[Found in branch "development" of repo at /Users/masukomi/workspace/git_accessories]

#### "all" output ####

Output for the -a / --all option is essentially the same as the output above only with the addition 
of a note as to which commit came from which contributer.
=end

require 'Date'
require 'Time'
require 'rubygems'
require 'optparse'
require 'grit'
include Grit


#BEGIN Subroutines
def process_options()
	options = {}
	optparse = OptionParser.new do | opts |
		opts.banner = "Usage: git status-report [-e <email>][-d <days>]\nGenerates a status report for what you worked on for the past n days."
		opts.on("-a", "--all", "Displays output for all contributers sorted by person") do 
			options[:all] = true
		end
		opts.on('-b', '--branches <branch name>', "Limit results to work found in the specified branch(es). \n\t\t\t\t\tMultiple branches can be comma separated") do | branches |
			options[:branches] = branches.split(/,\s*/)
		end
		opts.on('-c', '--current', "Generates status report for the current repo only") do
			options[:current] = true
		end
		opts.on("-d", "--days <num days>", "The number of days to generate the report for. Defaults to past 6 days (one week)") do | days |
			options[:days] = days.to_i
		end
		opts.on("-e", "--email <email address>", "The email address of the committer to generate a report for. \n\t\t\t\t\tDefaults to your \"git config user.email\" address. \n\t\t\t\t\tMultiple email addresses can be comma separated.") do |email|
			options[:email] = email.split(/,\s*/)
		end
		opts.on('-f', '--files', "Display a list of files involved in the commit(s)") do
			options[:files] = true
		end
		opts.on("-h", "--help", "Displays this message") do 
			puts optparse
			exit 0
		end
		opts.on("-r", "--reverse", "Displays output in reverse chronological order") do 
			options[:reverse] = true
		end
		opts.on("-s", "--simple", "Simpler output. Doesn't include the dates") do
			options[:simple] = true
		end
		opts.on("-v", "--verbose", "Verbose output includes details on each commit") do
			options[:verbose] = true
		end
	end

	begin
		optparse.parse!
	rescue OptionParser::InvalidOption => e
		puts e
		puts optparse
		exit 1
	end
	if (not options[:email])
		options[:email] = []
		raw_emails = process_raw_git_configs(`git config --get-all status-report.email`)
		if (raw_emails and raw_emails.length > 0)
			raw_emails.each do |email|
				options[:email].push(email.chomp)
			end
		else
			puts "You haven't configured an e-mail address for git. Please do so or specify one."
			puts optparse
			exit 1
		end
	end



	if (not options[:days])
		config_days = `git config --get status-report.days`.chomp
		options[:days] = config_days != '' ? config_days.to_i : 6
	end
	options[:since] = Time.parse((Date.today() - options[:days]).to_s)
	return options
end

def is_dir_git_repo(path, check_excludes = true)
	test_path = path.sub(/\/$/, '')
	test_path += '/.git'
	if (FileTest.exist?(test_path) and FileTest.directory?(test_path) )
		if (check_excludes)
			if (not @git_repos['excludes'].include?(path))
				return true
				#puts "adding #{path} from status-report.include"
			end
		else
			return true
		end
	end
	return false
end


# written because Grit doesn't support
# git config --get-all
def process_raw_git_configs(raw_output)
	if (raw_output and raw_output != '')
		if (raw_output.class == String)
			return raw_output.split(/\r\n|\n/)
		else
			return raw_output
		end
	end
	return []
end

def find_git_repos
	pwd = Dir.pwd
	@git_repos = {'includes' => [], 'excludes' => []}
	if (not @options[:current])
		raw_excludes = process_raw_git_configs(`git config --get status-report.exclude`)
		if (raw_excludes and raw_excludes.length() > 0)
			raw_excludes.each do | path |
				# don't care if it's not a valid repo because we're not going to attempt
				# to use anything in excludes
				@git_repos['excludes'].push(path.chomp!)
			end
		end
		raw_includes = process_raw_git_configs(`git config --get-all status-report.include`)
		if (raw_includes and raw_includes.length() > 0)
			raw_includes.each do |path|
				path.chomp!
				#make sure it exists
				if (FileTest.exist?(path) and FileTest.directory?(path))
					if (is_dir_git_repo(path))
						@git_repos['includes'].push(path)
					else
						puts "Skipping configured path which is not a non-bare git repo: #{path}"
					end
				else
					puts "Skipping invalid configuration path (didn't exist or wasn't a dir): #{path}"
				end
			end
		end
	else
		if (is_dir_git_repo(pwd, false))
			@git_repos['includes'].push(pwd)
		else
			puts "Current directory is not a non-bare git rep"
			exit 1
		end
	end
	
	if (@git_repos['includes'].length == 0)
		#nothing specified in the config
		#maybe the current dir is a git repo
		if (pwd !~ /\/$/)
			pwd += '/' #linux needs this, os x doesn't.
		end
		if (FileTest.exist?('./.git'))
			@git_repos['includes'].push(pwd)
			puts "Will report on current repo."
		else
			#oh... well then. This won't be pretty
			puts "Attempting to find git repos below the current directory."
			puts "This would be much faster if you started in the repo you wanted to"
			puts "report on or pre-configured repos to use."
			raw_git_repo_paths = `find ./ -type d -name ".git" 2>/dev/null`.chomp
			raw_repo_paths = raw_git_repo_paths.split(/\n/)
			#these will look like   .//workspace/htop-osx/.git
			# and we'll need to merge them with the current dir so that they match up with possible configured exclusions
			if (raw_repo_paths.length > 0)
				raw_repo_paths.each do | path | 
					path.sub!(/^\.\//, '')
					path.sub!(/\.git\/?/, '')
					absolute_path = pwd + path
					# TODO: support wildcard exclusions
					# ex  /home/username/personal_projects/*
					if (not @git_repos['excludes'].include?(absolute_path))
						if (FileTest.exist?(absolute_path))
							@git_repos['includes'].push(absolute_path)
							#TODO: Ask the user if they'd like this repo added to the current configuration
							#`git config --global --add status-report.include #{absolute_path}`
						else
							puts "Problem generating or finding sub-repo path. Couldn't find \"#{absolute_path}\""
						end
					end
				end
			#else
			#	puts "* none..."
			end
		end
	end
	
	if (@git_repos['includes'].length == 0)
		puts "Unable to find any git repos to run a report on."
		puts "Please configure the repos you want to run a report on or run this in a git repo."
		exit 1
	end
	return @git_repos
end

# initializes a grit Repo for each include path
# and sticks them in the git_repos hash under the grit key
def initialize_grit_repos (git_repos)
	git_repos['grit'] = []
	git_repos['includes'].each do | path |
		git_repos['grit'].push(Repo.new(path))
	end
end

# gets a list of files affected by a commit
def get_files_in_commit(commit)
	files = {}
	commit.diffs.each do | diff | 
		files[diff.a_path] = nil unless files.has_key? diff.a_path
		files[diff.b_path] = nil unless files.has_key? diff.b_path
		# what about diff.deleted_file and diff.new_file?
	end
	return files.keys
end


#END Subroutines



@options = process_options()
@git_repos = find_git_repos() # will exit if it can't find any repos
							 # has includes and excludes keys, but includes only includes items 
							 # that weren't excluded by the exclude rules.
initialize_grit_repos(@git_repos) #ads grit Repo objects to the @git_repos hash under 'grit' key
#confirm_saved_changes(@git_repos) # will exit if there are any unsaved changes


response_days = []
responses_by_day = {}
	# responses_by_day[date_string][epoch_date] => {branch, repo, commit, subject}
	# a hash of hashes keyed by iso date
	# within there is a hash keyed by epoch date
	# each epoch date is the key to the details of what was commited at that moment
	# we need the epoch date so that we can sort the items within the day because
	# they're pulled in from multiple branches and thus not necessarily in order
author_subjects_by_day ={} #guarantees we don't use the same subject from the same day from multiple branches


initial_dir = Dir.pwd
unsaved_changes = false

@multiple_people = (@options[:all] or @options[:email].length() > 1) ? true : false
longest_name = @multiple_people ? 0 : nil
@git_repos['grit'].each do |repo|
	# find_git_repos will automatically filter anything out of the includes list that 
	# needs to be excluded.
	
	# we want all the commits to all branches since option[:days] days ago
	
	
	branches = repo.heads() #an array of Grit::Head objects
	
	branches.each do | branch |
		if (@options[:branches] and not @options[:branches].include? branch.name)
			next
		end
		branch_commits = repo.commits_since(branch.name, @options[:since] ) #chronological ordering of commits
		branch_commits.each do | commit | 
			#puts commit.to_hash().inspect()
			if ( (@options[:all] or @options[:email].include?(commit.author.email)) and commit.date() >= @options[:since] )
				# there's currently a bug in grit where commits outside of the specified date range will be returned.
				# the date check above compensates for that until the patch has been pulled into grit and distributed
				# widely. - masukomi 7 / 31 / 10
				if (@multiple_people)
					longest_name = commit.author.name.length if commit.author.name.length > longest_name
				end
				commit_hash = commit.to_hash()
				response_hash = {
					'branch'	=> branch,
					'repo'		=> repo,
					'commit'	=> commit,
					'subject'	=> commit.message.split(/\n/)[0]
				}
				#commit.date() is a Time object 2010-07-26T22:46:41-04:00
				date_string = sprintf "%02d-%02d-%02d" % [commit.date().year, commit.date().month, commit.date().day]

				if (not responses_by_day[date_string])
					responses_by_day[date_string] = {}
					author_subjects_by_day[date_string] = {}
					response_days.push(date_string)
				end
				if (@multiple_people)
					if (not author_subjects_by_day[date_string][commit.author.email])
						author_subjects_by_day[date_string][commit.author.email] = {}
					end
				end
				
				if  ((@multiple_people and not author_subjects_by_day[date_string][commit.author.email][response_hash['subject']]) \
					or \
					(not @multiple_people and not author_subjects_by_day[date_string][response_hash['subject']]))

					# using the epoch time of the commit is too unique because it's not 
					# uncommon to commit on one branch, merge into another branch, and then ammend 
					# the commit on the merged branch, which gives you the same "work" (as far as the report 
					# is concerned) but with 2 different commit times
					
					# Also, betting on the unlikelyhood of two people commiting at the same second
					# eventually this will need to be addressed
					responses_by_day[date_string][commit.date().to_i] = response_hash
					if ( @multiple_people )
						author_subjects_by_day[date_string][commit.author.email][response_hash['subject']] = true
					else
						author_subjects_by_day[date_string][response_hash['subject']] = true
					end
				end
			end
		end
	end
end # end iterating over repos

days=['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']

puts "Status report for #{@options[:all] ? 'All contributors' : @options[:email].join(', ')} (last #{@options[:days]} days)"


if (response_days.length > 0)
	response_days.sort!
	if (@options[:reverse])
		response_days.reverse!
	end
	response_days.each do | date |
		
		puts date if not @options[:simple]
		count = nil
		if (not @options[:reverse])
			count = (responses_by_day[date].length > 1) ? 1 : ''
		else 
			count = (responses_by_day[date].length > 1) ? responses_by_day[date].length : ''
		end
		epoch_commit_times = responses_by_day[date].keys.sort
		if (@options[:reverse])
			epoch_commit_times.reverse!
		end
		epoch_commit_times.each do |epoch|
			commit_info =responses_by_day[date][epoch]
			commit = commit_info['commit']
			commit_hash = commit.to_hash()
			if (not @options[:verbose])
				if (not (@options[:all] or @multiple_people))
					puts "\t* #{commit_info['subject']}"
				else
					puts "\t* [ %-#{longest_name}s ] %s" % [commit.author.name , commit_info['subject']]
				end
			else
				if (count != '') # a multi-commit day
					if (not (@options[:all] or @multiple_people))
						puts "\tcommit #{count}---------- "
					else
						puts "\tcommit %d -- [ %-#{longest_name}s ] ---------- " % [count, commit.author.name]
					end
					commit_hash['message'].split(/\n/).each do | message_line |
						puts "\t\t#{message_line}"
					end
					puts "\t\t[Found in branch \"#{commit_info['branch'].name}\" of repo at #{commit_info['repo'].path}]" 
					count = @options[:reverse] ? count -1 : count +1
				else # just one commit this day
					if (@options[:all] or @multiple_people)
						puts "\t[ %-#{longest_name}s ] ---------- " % [commit.author.name]
					end
					commit_hash['message'].split(/\n/).each do | message_line |
						puts "\t#{message_line}"
					end
					puts "\t[Found in branch \"#{commit_info['branch'].name}\" of repo at #{commit_info['repo'].path}]" 
				end
			end
			if @options[:files]
				puts "\t\tFiles:"
				get_files_in_commit(commit).sort().each do | file |
					puts "\t\t\t* #{file}"
				end
			end
		end
	end
else
	puts "No commits found for #{@options[:email].join(', ')} #{@options[:branches] ? "on branch(es) #{@options[:branches].join(', ')}" : ''}"
end




