#!/bin/bash
REVPARSE=

# From git-parse-remote.sh
#GIT_DIR=$(git rev-parse -q --git-dir) || :;

get_rebase () {
  curr_branch=$(git symbolic-ref -q HEAD)
  curr_branch="${curr_branch#refs/heads/}"
  rebase=$(git config --bool branch.$curr_branch.rebase)
  if test -z "$rebase"
  then
      rebase=$(git config --bool pull.rebase)
  fi
  echo $rebase
}

get_default_remote () {
  curr_branch=$(git symbolic-ref -q HEAD)
  curr_branch="${curr_branch#refs/heads/}"
  origin=$(git config --get "branch.$curr_branch.remote")
  echo ${origin:-origin}
}

get_remote_merge_branch () {
  case "$#" in
  0|1)
      origin="$1"
      default=$(get_default_remote)
      test -z "$origin" && origin=$default
      curr_branch=$(git symbolic-ref -q HEAD) &&
      [ "$origin" = "$default" ] &&
      echo $(git for-each-ref --format='%(upstream)' $curr_branch)
      ;;
  *)
      repo=$1
      shift
      ref=$1
      # FIXME: It should return the tracking branch
      #        Currently only works with the default mapping
      case "$ref" in
      +*)
    ref=$(expr "z$ref" : 'z+\(.*\)')
    ;;
      esac
      expr "z$ref" : 'z.*:' >/dev/null || ref="${ref}:"
      remote=$(expr "z$ref" : 'z\([^:]*\):')
      case "$remote" in
      '' | HEAD ) remote=HEAD ;;
      heads/*) remote=${remote#heads/} ;;
      refs/heads/*) remote=${remote#refs/heads/} ;;
      refs/* | tags/* | remotes/* ) remote=
      esac
      [ -n "$remote" ] && case "$repo" in
    .)
        echo "refs/heads/$remote"
        ;;
    *)
        echo "refs/remotes/$repo/$remote"
        ;;
      esac
  esac
}


while true;
do
  case "$1" in
    -- ) shift; break ;;
    -a ) shift; REVPARSE=true ;; #always print a name
    -l ) shift; LONG=true ;; #long branch name
  --remote ) shift;
    get_default_remote
    exit 0
    ;; #print the remote of the current branch
  --upstream ) shift;
    get_remote_merge_branch
    exit 0
    ;; #print the upstream of the current branch
  --rebase ) shift;
    get_rebase
    exit 0
    ;; #does a pull rebase rather than merge?
    *) break;;
  esac
done

readsymbolic() {
  if [ -z "$LONG" ]; then
    shortok=$(git symbolic-ref --short 2>&1 | grep 'error: unknown option')
    if [ -n "$shortok" ]; then
      branch=$(git symbolic-ref -q HEAD)
      if [ -z "$branch" ]; then return 1; fi
      echo ${branch#refs/heads/}
    else
      git symbolic-ref -q --short HEAD
    fi
  else
    git symbolic-ref -q HEAD
  fi
}

if [ -n "$REVPARSE" ]; then
   readsymbolic || git rev-parse --verify HEAD
else
   readsymbolic
fi
