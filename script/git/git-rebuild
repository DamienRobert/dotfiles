#!/usr/bin/zsh
#Helper to rebase patches and rebuild branches

# 1) Rebase at once several branches:
# git rebuild upstream branch1 branch2
# -> construct an octopus merge of all branches, rebase the octopus and
# update these branches
# Options: 
#   --root root: add all branches that contain root and not merged into upstream
#    --from root: shortcut for rebasing all branches from root onto new_upstream (ie this is a shortcut for '--root root --onto upstream root')
#   --rb rebase_options/ -i / --onto branch: passed to rebase
#   --continue/--abort/...: passed to rebase, then we updated the branch from the octopus position

# 2) Then rebase patches (in case we could not do it via a multi rebase)
#PATCH=("origin:upstream:br1,br2") #(if upstream is empty looks at the upstream of br1, br2)
#=> rebase branches onto 'upstream':
#   git rebase --onto $upstream $origin $branch /
#   and move $origin to $upstream
# Note: if origin is empty, simply do: git rebase $upstream $branch

# 3) Then rebuild the integration branches
#BUILD=("origin:upstream:br1,br2") #(if upstream is empty looks at the upstream of origin)
#=> move 'origin' to 'upstream' and merge the branches together:
#   git checkout -B $origin $upstream && git merge $branches

# Options:
# -s/--save: before rebasing/moving the branches, save them in $OLDBR
# --save-name: name of $OLDBR (default to old-patches)

#Ex for bup: git my rebuild -- -s --build build-arch:build:archlinux,index --build build-python2:build:index --patch patch-origin:master:build,archlinux,index
# => rebase the patches build, archlinux, index; then create the
# integration branch build-python2 on top of build (merging index), and
# build-arch (merging archlinux, index)

BUILD=()
PATCH=()
roots=()
SAVEBR=
action=
from=
rb_opts=()
# octomerge_name="refs/hidden/octomerge"
octomerge_name="_octomerge"
# Warning: when creating the octomerge we need a standard name (so it will
# be put in refs/heads). Otherwise rebase does not update the branch name
# after rebasing. And we need to do git rebase upstream _octomerge (not
# refs/heads/_octomerge) for this to work

while true;
do
  case "$1" in
    -- ) break ;;
    -s|--save ) shift ; SAVEBR=t ;;
    --save-name ) shift ; OLDBR=$1; shift ;;
    -b|--build ) shift ; BUILD+=($1); shift ;;
    -p|--patch ) shift ; PATCH+=($1); shift ;;
    -r|--root ) shift; roots+=($1); shift ;;
    -f|--from ) shift; from=$1; shift ;;
    -i ) shift; rb_opts+=('-i') ;;
    --onto ) shift; rb_opts+=('--onto' $1); shift ;;
    --rb ) shift; rb_opts+=(${(z)1}); shift ;;
    --continue|--skip|--abort|--quit|--finish) action=$1; shift ;;
    *) break;; #go to PATCH
  esac
done

split_string() {
	split=("${(s/:/)1}")
	origin=$split[1]
	orig_upstream=$split[2]
	upstream=$orig_upstream
	[[ -z $upstream && -n $origin ]] && upstream=$(git name-rev --name-only --always "$origin@{u}")
	[[ -z $upstream ]] && upstream="master"
	branches=$split[3]
	branches=("${(s/,/)branches}")
	echo "! orig: $origin, upstream: $upstream [$orig_upstream], branches: $branches"
}

doorfail() {
	echo "# $@"
	$@ || exit $?
}

savebr() {
	local msg
	msg=($@)
	doorfail git my trivial -- -m "Save branches: $msg" -g -B $OLDBR $OLDBR $@
}

curbr=$(git current-branch -a)
[[ -z $OLDBR ]] && OLDBR="old-patches"
[[ -n $SAVEBR ]] && { git rev-parse --verify $OLDBR 2>/dev/null || doorfail git my trivial -- -g -b $OLDBR }

# multi branch rebase
if [[ -n $action || -n $@ ]]; then
  if [[ -n $action ]]; then
    # Pass the action through to git-rebase.
    [[ $action != --finish ]] && doorfail git rebase $action
    # Find the branches we used
    branches=$(git log --format=%s $octomerge_name -1)
    branches=(${=branches#merging })
  elif [[ -n $@ ]]; then
    new_upstream=$1; shift
    branches=($@)
    # Fetch all the branches that contain the root of the subtree
    for root in $roots; do
      branches+=($(git for-each-ref --contains $root --no-merged $new_upstream --format='%(refname:strip=2)' refs/heads/))
    done
    # --from root is a shortcut for rebasing all branches from root onto new_upstream
    msg="=> rebasing $branches onto $new_upstream"
    if [[ -n $from ]]; then
      msg="$msg [from: $from]"
      branches+=($(git for-each-ref --contains $from --no-merged $new_upstream --format='%(refname:strip=2)' refs/heads/))
      rb_opts+=("--onto=$new_upstream")
      new_upstream=$from
    fi
    [[ -n $SAVEBR ]] && savebr $branches
    echo "=> msg"

    # Create the octomerge: a temporary commit that has all the topic branches as parents.
    # Use the tree from the common ancestor of all the branches. It probably
    # doesn't matter what tree we use, but the merge-base is a) conveniently
    # accessible and b) probably the most sensible thing. Conceptually, this
    # equates to committing an octomerge that undoes everything the topic branches did, which is a well-defined operation.
    merge_base=$(git merge-base --octopus $branches)
    octomerge=$(echo 'merging' $branches |
      git commit-tree $merge_base^{tree} -p `echo $branches | sed -e's/ / -p /g'`)
    # doorfail git update-ref $octomerge_name $octomerge
    doorfail git switch -c $octomerge_name $octomerge
    # And then rebase the octomerge onto the new upstream.
    doorfail git rebase --rebase-merges $rb_opts $new_upstream
  fi

  # Move all the old branches to point to the rebased commits.
  # The parents of the octomerge remain in the same order through the rebase.
  new_commit_list=($(git rev-parse $octomerge_name^@))
  echo $branches
  for index in $(seq 1 $#branches); do
    branch=${branches[$index]}
    echo $index, $branch
    echo "moving $branch (was $(git rev-parse --short $branch))"
    git branch -f $branch ${new_commit_list[$index]}
  done

  # git update-ref -d $octomerge_name # clean up.
  git branch -d $octomerge_name
fi

for patch in $PATCH; do
	echo "! patch: $patch"
	split_string $patch
	[[ -n $SAVEBR ]] && savebr $origin $branches
	for branch in $branches; do
		#hack if no upstream nor origin was specified, we look at the upstream of each branch individually
		if [[ -z $orig && -z $orig_upstream ]]; then
			upstream=$(git rev-parse --name-only --always "$branch@{u}")
			[[ -z $upstream ]] && upstream="master"
		fi
		if git merge-base --is-ancestor $upstream $branch;
		then
			#nothing to do
		else
			#we need to rebase
			if [[ -n $origin ]]; then
				doorfail git rebase --onto $upstream $origin $branch
			else
				doorfail git rebase $upstream $branch
			fi
		fi
		#update $origin to new location
		if [[ -n $origin ]]; then
			doorfail git checkout -B $origin $upstream
		fi
	done
done

for build in $BUILD; do
	echo "! build: $build"
	split_string $build
	[[ -n $SAVEBR ]] && git rev-parse --verify $origin 2>/dev/null && savebr $origin
	doorfail git checkout -B $origin $upstream
	doorfail git merge $branches
done

doorfail git checkout $curbr
